Ba_vec8 <- rep(x = "Dandelion",times=6)
length(Ba_vec1)
length(Ba_vec2)
length(Ba_vec3)
length(Ba_vec4)
length(Ba_vec5)
length(Ba_vec6)
length(Ba_vec7)
length(Ba_vec8)
# b-. Escriba un programa en R para sumar dos vectores de tipo entero y longitud 3.
Bb_vec1 <- c(4L,7L,16L)
Bb_vec2 <- c(8L,10L,2L)
(Bb_suma <- Bb_vec1 + Bb_vec2)
# c-. Escriba un programa en R para encontrar la suma, la media y el producto de un vector.
Bc_vec <- 1:20
(Bc_sum <- sum(Bc_vec))
(Bc_med <- mean(Bc_vec))
(Bc_pro <- prod(Bc_vec))
# d-. Escriba un programa R para encontrar la suma, la media y el producto de un vector, ignore elementos como NA o NaN.
Bd_vec <- c(NA,1,33,17,NA,25,22)
(Bd_sum <- sum(Bd_vec,na.rm=TRUE))
(Bd_med <- mean(Bd_vec,na.rm=TRUE))
(Bd_prod <- prod(Bd_vec,na.rm=TRUE))
# e-. Escriba un programa en R para ordenar un Vector en orden ascendente y descendente.
Be_vec <- c(9,24,19,2,30,22)
(Be_vec_cre <- sort(Be_vec,decreasing = FALSE))
(Be_vec_dec <- sort(Be_vec,decreasing=TRUE))
# f-. Escriba un programa R para probar si un vector dado contiene un elemento específico.
Be_vec == 19 #En caso de que se busque obtener un vector lógico como salida
19 %in% Be_vec #En caso de que se busque obtener una sola respuesta lógica
# g-. Escriba un programa R para encontrar el segundo valor más alto en un vector dado.
Bg_vec <- c(23,56,3,96,12,45)
(Bg_vec_dec <- sort(Bg_vec,decreasing=TRUE))
Bg_vec_dec[2]
# h-. Escriba un programa en R para encontrar el enésimo valor más alto en un vector dado.
Bh_vec <- 1:100
Bh_vec_dec <- sort(Bh_vec,decreasing=TRUE)
Bh_vec_dec[1] #Primer valor más alto
Bh_vec_dec[2] #segundo valor más alto
Bh_vec_dec[3] #tercer valor más alto
# i-. Escriba un programa en R para convertir la(s) columna(s) dada(s) de un data.frame en un vector.
(Bi_v1 <- Ae_dtfr[,1])
(Bi_v2 <- Ae_dtfr[,2])
(Bi_v3 <- Ae_dtfr[,3])
(Bi_v4 <- Ae_dtfr[,4])
(Bi_v5 <- Ae_dtfr[,5])
# j-. Escriba un programa R para encontrar los elementos de un vector dado que no están en otro vector dado.
Bj_vec1 <- c(2,9,19,22,24,30)
Bj_vec2 <- c(4,7,9,17,21,22)
setdiff(Bj_vec1,Bj_vec2) #Para encontrar qué elementos de Bj_vec1 no están en Bj_vec1
setdiff(Bj_vec2,Bj_vec1) #Para encontrar qué elementos de Bj_vec2 no están en Bj_vec1
# k-. Escriba un programa en R para invertir el orden del vector dado.
Bk_vec <- 1:50
(bk_vec_rev <- rev(Bk_vec))
# l-. Escriba un programa en R para crear un vector y encuentre la longitud y la dimensión del vector.
Bl_vec <- c(9,19,24,30)
(Bl_lon <- length(Bl_vec))
(Bl_dim <- dim(Bl_vec))
# m-. Escriba un programa R para probar si el valor del elemento de un vector dado es mayor que 10 o no. Devuelve TRUE o FALSE
Bm_vec <- 5:35
Bm_valor <- Bm_vec[3] #En este caso, se extrae el tercer valor
Bm_valor > 10
# n-. Escriba un programa en R para sumar 3 a cada elemento en un vector dado. Imprime el vector original y el nuevo.
(Bn_vec <- 1:20)
(Bn_suma <- Bn_vec+3)
# o-. Escriba un programa en R para crear un vector usando el operador : y la función seq().
Bo_vec1 <- 1:100
Bo_vec2 <- seq(from=0,to=100,by=10)
# a-. Escriba un programa R para encontrar los niveles de factor de un vector dado.
(Ca_colores <- factor(
c("azul","rojo","amarillo","rojo","verde","amarillo","azul",
levels=c("azul","rojo","amarillo","verde"))))
(Ca_niveles <- levels(Ca_colores))
# b-. Escriba un programa R para cambiar el primer nivel de un factor con otro nivel de un factor dado.
levels(Ca_colores)[1] <- levels(iris$Species)[1]
levels(Ca_colores)
# c-. Escriba un programa en R para crear un factor ordenado a partir de datos que consisten en los nombres de los meses.
Cc_meses <- month.name
(Cc_fac <- factor(Cc_meses,levels=Cc_meses))
(Cc_fac2 <- factor(Cc_meses,ordered=TRUE))
# d-. Escriba un programa R para extraer los cinco niveles de factor creados a partir de una muestra aleatoria de las letters (parte de la distribución base R).
set.seed(123)
Cd_letras <- sample(letters,5)
Cd_fac <- factor(Cd_letras)
levels(Cd_fac)
# e-. Escriba un programa en R para crear un factor correspondiente al conjunto de datos de la altura de las mujeres, que contenga la altura y el peso de una muestra de mujeres.
Ce_grupo <- factor(c("G1","G2","G1","G2"))
Ce_altura <- c(1.67,1.55,1.63,1.70)
Ce_peso <- c(55,61,62,65)
Ce_dtfr <- data.frame(Ce_grupo,Ce_altura,Ce_peso)
str(Ce_dtfr)
# a-. Escriba un programa en R para crear una matriz en blanco.
Da_mat <- matrix(data=NA,nrow=5,ncol=5)
# b-. Escriba un programa en R para crear una matriz tomando como entrada un vector dado de números. Muestre la matriz.
Db_vec <- 1:20
(Db_mat <- matrix(Db_vec,nrow=4,ncol=5)) #NOTA: si la matriz es de menor cantidad de elementos que el vector, se asignan los primeros elementos
# c-. Escriba un programa en R para crear una matriz que tome un vector dado de números como entrada y defina los nombres de columna y fila. Muestre la matriz.
Dc_mat <- matrix(Db_vec,nrow=5,ncol=4,byrow = TRUE)
rownames(Dc_mat) <- c(1,2,3,4,5)
colnames(Dc_mat) <- c("A","B","C","D")
Dc_mat
# d-. Escriba un programa en R para crear dos matrices de 2x3, luego sume, reste, multiplique y divida las matrices.
Dd_mat1 <- matrix(data=5:10,nrow=2,ncol=3)
Dd_mat2 <- matrix(data=15:20,nrow=2,ncol=3)
Dd_mat1
Dd_mat2
(Dd_sum <- Dd_mat1+Dd_mat2)
(Dd_res <- Dd_mat1-Dd_mat2)
(Dd_mul <- Dd_mat1*Dd_mat2)
(Dd_div <- Dd_mat1/Dd_mat2)
# h-. Escriba un programa en R para crear una matriz de correlación a partir de un data.frame del mismo tipo de datos.
Dh_dtfr <- data.frame(S1=c(1,2,3,4,5),S2=c(34,56,76,78,90),S3=c(11,12,26,34,35),S4=c(45,46,49,55,60),S5=c(90,95,96,97,100))
(Dh_cor <- cor(Dh_dtfr))
# i-. Escriba un programa R para encontrar el índice de fila y columna de valor máximo y mínimo en una matriz dada.
Di_vec <- c(8,3,45,23,33,12,64,30,2,3,56,41,49,32,53,12,11,9,5,60)
(Di_mat <- matrix(data=Di_vec,nrow=4,ncol=5))
(Di_max <- max(Di_mat))
(Di_log_max <- Di_mat == Di_max)
(Di_rowcol_max <- which(Di_log_max,arr.ind = TRUE))
(Di_min <-min(Di_mat))
(Di_log_min <- Di_mat == Di_min)
(Di_rowcol_min <- which(Di_log_min,arr.ind=TRUE))
# j-. Escriba un programa R para concatenar dos matrices dadas de la misma columna pero filas diferentes.
Dj_mat1 <- matrix(data=12:1,nrow=3,ncol=4)
Dj_mat2 <- matrix(data=21:40,nrow=5,ncol=4)
(Dj_union <- rbind(Dj_mat1,Dj_mat2))
n <- rnorm(10000, 500, 100)
hist(n)
cells = c(1,3,5,7,8,9,11,12,14)
rnames = c("Row1", "Row2", "Row3")
cnames = c("Col1", "Col2", "Col3")
m2 = matrix(cells, nrow=3, ncol=3, byrow=TRUE, dimnames=list(rnames, cnames))
sample(x,5)
x <- rnorm(10)
sample(x,5)
x <- rnorm(10)
x[sample(1:10,2)] <- NA
x
?na.omit
x <- round(rnorm(10)*10)
sort(x,decreasing = TRUE)[2]
x
v1 <- 1:5
v2 <- 3:7
v1[!(v1 %in% v2)]
v1
v1;v2
v1[!(v1 %in% v2)]
#los elementos de v2 que no estan en v1
v2[!(v2 %in% v1)]
v <- 5:14
v[8] > 10
v[8]
v[8] > 10
factor(sample(letters,40,replace = TRUE))
factor(sample(letters[1:10],40,replace = TRUE))
factor(sample(letters[1:5],40,replace = TRUE))
letras <- factor(sample(letters[1:5],40,replace = TRUE))
sample(1:5,10)
sample(1:5,10,replace = TRUE)
letras <- factor(letters[sample(1:5,10,replace = TRUE)],)
letras <- factor(letters[sample(1:5,10,replace = TRUE)])
letras
levels(letras)
sample(1:5,10,replace = TRUE)]
sample(1:5,10,replace = TRUE)
letras <- factor(letters[sample(1:5,20,replace = TRUE)])
levels(letras)
?matrix
matrix(v1,3,3,dimnames = list(c('fila','fila2','fila3'),c('col1','col2','col3')))
m <- matrix(sample(1:100,9),3,3)
m
which(m == max(m),arr.ind = TRUE)
which(m == min(m),arr.ind = TRUE)
m1 <- matrix(sample(1:100,12),3,4)
m2 <- matrix(sample(1:100,20),5,4)
m1 <- matrix(sample(1:100,12),3,4)
m2 <- matrix(sample(1:100,20),5,4)
cbind(m1,m2)
m1 <- matrix(sample(1:100,12),3,4)
m2 <- matrix(sample(1:100,20),5,4)
cbind(m1,m2)
rbind(m1,m2)
letras <- factor(sample(letters[1:5],40,replace = TRUE))
levels(iris$Species) <- levels(letras)[1]
levels(iris$Species)[1] <- levels(letras)[1]
levels(iris$Species)
library(readr)
X1 <- read_csv("~/OneDrive/R-projects/Clases/DTSE1017/Talleres/data/archivos_por_estacion/1.csv")
View(X1)
X1
library(readr)
X1 <- read_delim("~/OneDrive/R-projects/Clases/DTSE1017/Talleres/data/archivos_por_estacion/1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(X1)
X!
X1
summary(X1)
cor(X1)
cor(X1[,c('temp_promedio_aire','temp_maxima','temp_minima')])
cor(X1[1:(24*31),c('temp_promedio_aire','temp_maxima','temp_minima')])
cor(X1[1:(24*31),c('temp_promedio_aire','temp_maxima','temp_minima')],na.rm = TRUE)
cor(na.omit(X1[1:(24*31),c('temp_promedio_aire','temp_maxima','temp_minima')]))
?cor
library(agrometR)
extaciones_agromet
extaciones_agromet
estaciones_agromet
library(sf)
?read_sf
nc = st_read(system.file("shape/nc.shp", package="sf"))
order(nc$AREA)
nc[order(nc$AREA),]
nc_ordenado <- nc[order(nc$AREA),]
plot(nc[1:50,'AREA'])
plot(nc_ordenado[1:50,'AREA'])
nc_ordenado$AREA
plot(nc_ordenado[50:100,'AREA'])
order(iris,iris$Sepal.Length,iris$Sepal.Width)
?order
order(iris,c(iris$Sepal.Length,iris$Sepal.Width))
order(iris,Sepal.Length,Sepal.Width))
order(iris,Sepal.Length,Sepal.Width)
(ii <- order(x <- c(1,1,3:1,1:4,3), y <- c(9,9:1), z <- c(2,1:9)))
## 6  5  2  1  7  4 10  8  3  9
rbind(x, y, z)[,ii] # shows the reordering (ties via 2nd & 3rd arg)
ii
rbind(x, y, z)[, order(x, -y, z)]
rbind(x, y, z)
rbind(x, y, z)[, order(x, -y, z)]
dd <- transform(data.frame(x, y, z),
z = factor(z, labels = LETTERS[9:1]))
dd
order(bb,x)
bb
order(dd,x)
dd[,order(x)]
dd[order(x),]
dd[order(x,y),]
order(iris,Sepal.Length,Sepal.Width)
order(iris,iris$Sepal.Length,Sepal.Width)
order(iris,iris$Sepal.Length,irid$Sepal.Width)
order(iris,iris$Sepal.Length,iris$Sepal.Width)
order(iris,iris$Sepal.Length)
order(iris,Sepal.Length)
order(iris,"Sepal.Length")
order(iris,iris$Sepal.Length)
order(Sepal.Length,Sepal.Width)
order(iris$Sepal.Length,iris$Sepal.Width)
data.frame(a= c(1,2,NA,4,8),b = c(NA,'a','b',NA,NA))
df == NA
df <-data.frame(a= c(1,2,NA,4,8),b = c(NA,'a','b',NA,NA))
df == NA
df
df[df == NA] <- 3
df
is.na(df)
?intersect
intersect(iris,iris)
union(iris,iris)
union(iris,iris) |> as.data.frame()
dim(iris)
union(iris,iris) |> as.data.frame() |> dim()
a <- c("a", "b", "c", "d", "e")
b <- c("d", "e", "f", "g")
union(a,b)
pos <- order(iris$Sepal.Length,iris$Sepal.Width) #ordena por las variables Sepal.Length y Sepal.Width del data.frame iris y devuelve la posición de los elementos ordenados
iris[pos,] #luego puedo hacer indexación con el vector con las posiciones ordenadas
data <- airquality
head(data)
class(data)
#ordena por la primera y segunda columna
result <- data[order(data[,1:2]),]
order(data[,1:2])
data
data[,1:2]
#ordena por la primera y segunda columna
result <- data[order(data[,1]),data[,2]]
head(data)
#ordena por la primera y segunda columna
result <- data[order(data[,1],data[,2])]
#ordena por la primera y segunda columna
result <- data[order(data[,1],data[,2]),]
head(result)
data_info <- read.csv2('data/metadata_estaciones_agrometAPI.csv')
names(data_info)
data_info[ema == id_estacion,]
id_estacion <- 50 #codigo estacion asignada
data_info[ema == id_estacion,]
data_info
str(em)
str(ema)
str(data_info)
data_info[data_info$ema == id_estacion,]
data <- read.csv2('data/50.csv')
data <- read.csv2('data/archivos_csv_por_estacion/50.csv')
data <- read.csv2('data/archivos_csv_por_estacion/50.csv')
data
names(data)
data_temp <- data[,c('fecha_hora','temp_promedio_aire','temp_minima','temp_maxima')]
data_temp
data$fecha_hora
?cor
rnorm(5) + rnorm(3)
rnorm(5) + rnorm(2)
sample(1,1:3)
?sample
sample(1:3,3)
sample(1,3)
sample(1:3,1)
datasets()
datasets
?datasets::
?datasets
library(help = "datasets")
women
women |> class()
airquality
airquality
mtcars
iris
dim(iris)
dim(mtcars)
m <- matrix(1:9,3)
m
m[,1]
m[,1,drop = FALSE]
m <- matrix(1:9,3)
#codigo 2
m[,1,drop = FALSE]
#codigo 1
m[,1]
iris[1:sample(1,150),]
sample(1,150)
sample(150,1)
sample(150,1)
sample(150,1)
sample(150,1)
sample(150,1)
sample(50:150,1)
sample(50:150,1)
sample(50:150,1)
sample(50:150,1)
iris <- iris[1:sample(50:150,1),]
?split()
split(1:4,c('a','a','b','b'))
as.data.frame(split(1:4,c('a','a','b','b')))
iris <- iris[1:sample(50:150,1),]
iris
m1 <- matrix(1:sample(seq(3,12,3),1),3)
m1
m1 <- matrix(1:sample(seq(9,18,3),1),3)
m1
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
m1 <- matrix(1:sample(seq(9,18,3),1),3)
m2 <- matrix(1:sample(seq(9,18,3),1),3)
m1
m2
dim(iris)
dim(mtcars)
dim(airquality)
dim(women)
AirPassengers
CO2
CO2 |> class()
PlantGrowth
USArrests
USArrests |> class()
USArrests |> dim()
df <- list(iris,mtcars,airquality,USArrests)
#| eval: true
i <- sample(1:4,1)
df <- list(iris,mtcars,airquality,USArrests)[[i]]
df
sample(ncol(df),3)
cols <- names(df)[sample(ncol(df),3)]
cols
iris
mtcars
airquality
USArrests
sample(nrow(df),5)
data("iris")
iris
summary(iris)
summary(mtcars)
summary(airquality)
summary(USArrests)
state.center
state.center |> class()
sample(5,100)
-50:50[sample(100,5)]
sample(100,5)
(-50:50)[sample(100,5)]
library(agrometR)
library(agrometR)
library(tidyverse)
estaciones_agromet |>
slice_sample(5)
estaciones_agromet |>
slice_sample(n = 5)
data <- get_agro_data(emas,'2023-10-03 00:00:00', '2023-10-03 23:00:00')
estaciones_agromet |>
slice_sample(n = 5) |>
pull(ema) ->emas
data <- get_agro_data(emas,'2023-10-03 00:00:00', '2023-10-03 23:00:00')
data
names(data)
data |>
select(station_id:temp_maxima)
data |>
select(station_id:temp_maxima) |>
nest(-station_id)
data |>
select(station_id:temp_maxima) |>
nest(data = -station_id)
data |>
data |>
select(station_id:temp_maxima) |>
nest(data = -station_id) |>
map2(data,emas,\(x,ema) write_csv(x,paste0('datos_ema_',ema,'.csv')))
data
?map2
data |>
select(station_id:temp_maxima) |>
nest(data = -station_id) |>
map2(data,emas,\(x,ema) write_csv(x,paste0('datos_ema_',ema,'.csv')))
names(data)
lapply(emas,\(x){
data |>
filter(station_id == x) |>
write_csv(paste0('datos_ema_',x,'.csv')))
lapply(emas,\(x){
data |>
filter(station_id == x) |>
write_csv(paste0('datos_ema_',x,'.csv'))
})
estaciones_agromet |>
st_as_sf(coords = c('longitud','latitud'),crs = 4326)
library(sf)
estaciones_agromet |>
st_as_sf(coords = c('longitud','latitud'),crs = 4326)
estas_sf <- estaciones_agromet |>
st_as_sf(coords = c('longitud','latitud'),crs = 4326)
estas_sf
estas_sf |>
slice_sample(n = 5)
estas_sf |>
slice_sample(n = 5) |>
pull(region) -> regs
regs
estas_sf |>
slice_sample(n = 5) |>
pull(region) -> regs
regs
estas_sf |>
group_by(region) |>
slice_sample(n = 5) |>
pull(region) -> regs
regs
estas_sf |>
group_by(region) |>
slice_sample(n = 1) |>
pull(region) -> regs
regs
estas_sf |>
group_by(region) |>
slice_sample(n = .1) |>
pull(region) -> regs
estas_sf$region[sample(16,5)]
estas_sf$region[sample(16,5)]
estas_sf$region[sample(16,5)]
estas_sf$region[sample(16,5,replace = FALSE)]
estas_sf$region[sample(16,5,replace = FALSE)]
unique(estas_sf$region)[sample(16,5,replace = FALSE)]
unique(estas_sf$region)[sample(16,5,replace = FALSE)]
unique(estas_sf$region)[sample(16,5,replace = FALSE)]
regs <- c("Coquimbo",  "Los Lagos", "Los Ríos",  "O'Higgins", "Atacama")
lapply(regs,\(x){
estas_sf |>
filter(region == x) |>
write_sf(paste0('region_',x,'.gpkg'))
})
estas_sf |>
filter(region == x)  |>
plot(x$geometry)
lapply(regs,\(x){
estas_sf |>
filter(region == x)  |>
plot()
})
setwd("~/Documentos/IMSE1017/data_evaluacion_1")
data <- read.csv('datos_ema_49.csv')
data
read.csv('datos_ema_49.csv') |> summary()
read.csv('datos_ema_126.csv') |> summary()
data
data |> names()
read_sf('region_Atacama.gpkg')
read_sf('region_Atacama.gpkg') ->geo
plot(geo[,'comuna'])
