(Dd_mul <- Dd_mat1*Dd_mat2)
(Dd_div <- Dd_mat1/Dd_mat2)
# h-. Escriba un programa en R para crear una matriz de correlación a partir de un data.frame del mismo tipo de datos.
Dh_dtfr <- data.frame(S1=c(1,2,3,4,5),S2=c(34,56,76,78,90),S3=c(11,12,26,34,35),S4=c(45,46,49,55,60),S5=c(90,95,96,97,100))
(Dh_cor <- cor(Dh_dtfr))
# i-. Escriba un programa R para encontrar el índice de fila y columna de valor máximo y mínimo en una matriz dada.
Di_vec <- c(8,3,45,23,33,12,64,30,2,3,56,41,49,32,53,12,11,9,5,60)
(Di_mat <- matrix(data=Di_vec,nrow=4,ncol=5))
(Di_max <- max(Di_mat))
(Di_log_max <- Di_mat == Di_max)
(Di_rowcol_max <- which(Di_log_max,arr.ind = TRUE))
(Di_min <-min(Di_mat))
(Di_log_min <- Di_mat == Di_min)
(Di_rowcol_min <- which(Di_log_min,arr.ind=TRUE))
# j-. Escriba un programa R para concatenar dos matrices dadas de la misma columna pero filas diferentes.
Dj_mat1 <- matrix(data=12:1,nrow=3,ncol=4)
Dj_mat2 <- matrix(data=21:40,nrow=5,ncol=4)
(Dj_union <- rbind(Dj_mat1,Dj_mat2))
n <- rnorm(10000, 500, 100)
hist(n)
cells = c(1,3,5,7,8,9,11,12,14)
rnames = c("Row1", "Row2", "Row3")
cnames = c("Col1", "Col2", "Col3")
m2 = matrix(cells, nrow=3, ncol=3, byrow=TRUE, dimnames=list(rnames, cnames))
sample(x,5)
x <- rnorm(10)
sample(x,5)
x <- rnorm(10)
x[sample(1:10,2)] <- NA
x
?na.omit
x <- round(rnorm(10)*10)
sort(x,decreasing = TRUE)[2]
x
v1 <- 1:5
v2 <- 3:7
v1[!(v1 %in% v2)]
v1
v1;v2
v1[!(v1 %in% v2)]
#los elementos de v2 que no estan en v1
v2[!(v2 %in% v1)]
v <- 5:14
v[8] > 10
v[8]
v[8] > 10
factor(sample(letters,40,replace = TRUE))
factor(sample(letters[1:10],40,replace = TRUE))
factor(sample(letters[1:5],40,replace = TRUE))
letras <- factor(sample(letters[1:5],40,replace = TRUE))
sample(1:5,10)
sample(1:5,10,replace = TRUE)
letras <- factor(letters[sample(1:5,10,replace = TRUE)],)
letras <- factor(letters[sample(1:5,10,replace = TRUE)])
letras
levels(letras)
sample(1:5,10,replace = TRUE)]
sample(1:5,10,replace = TRUE)
letras <- factor(letters[sample(1:5,20,replace = TRUE)])
levels(letras)
?matrix
matrix(v1,3,3,dimnames = list(c('fila','fila2','fila3'),c('col1','col2','col3')))
m <- matrix(sample(1:100,9),3,3)
m
which(m == max(m),arr.ind = TRUE)
which(m == min(m),arr.ind = TRUE)
m1 <- matrix(sample(1:100,12),3,4)
m2 <- matrix(sample(1:100,20),5,4)
m1 <- matrix(sample(1:100,12),3,4)
m2 <- matrix(sample(1:100,20),5,4)
cbind(m1,m2)
m1 <- matrix(sample(1:100,12),3,4)
m2 <- matrix(sample(1:100,20),5,4)
cbind(m1,m2)
rbind(m1,m2)
letras <- factor(sample(letters[1:5],40,replace = TRUE))
levels(iris$Species) <- levels(letras)[1]
levels(iris$Species)[1] <- levels(letras)[1]
levels(iris$Species)
library(readr)
X1 <- read_csv("~/OneDrive/R-projects/Clases/DTSE1017/Talleres/data/archivos_por_estacion/1.csv")
View(X1)
X1
library(readr)
X1 <- read_delim("~/OneDrive/R-projects/Clases/DTSE1017/Talleres/data/archivos_por_estacion/1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(X1)
X!
X1
summary(X1)
cor(X1)
cor(X1[,c('temp_promedio_aire','temp_maxima','temp_minima')])
cor(X1[1:(24*31),c('temp_promedio_aire','temp_maxima','temp_minima')])
cor(X1[1:(24*31),c('temp_promedio_aire','temp_maxima','temp_minima')],na.rm = TRUE)
cor(na.omit(X1[1:(24*31),c('temp_promedio_aire','temp_maxima','temp_minima')]))
?cor
library(agrometR)
extaciones_agromet
extaciones_agromet
estaciones_agromet
library(sf)
?read_sf
nc = st_read(system.file("shape/nc.shp", package="sf"))
order(nc$AREA)
nc[order(nc$AREA),]
nc_ordenado <- nc[order(nc$AREA),]
plot(nc[1:50,'AREA'])
plot(nc_ordenado[1:50,'AREA'])
nc_ordenado$AREA
plot(nc_ordenado[50:100,'AREA'])
order(iris,iris$Sepal.Length,iris$Sepal.Width)
?order
order(iris,c(iris$Sepal.Length,iris$Sepal.Width))
order(iris,Sepal.Length,Sepal.Width))
order(iris,Sepal.Length,Sepal.Width)
(ii <- order(x <- c(1,1,3:1,1:4,3), y <- c(9,9:1), z <- c(2,1:9)))
## 6  5  2  1  7  4 10  8  3  9
rbind(x, y, z)[,ii] # shows the reordering (ties via 2nd & 3rd arg)
ii
rbind(x, y, z)[, order(x, -y, z)]
rbind(x, y, z)
rbind(x, y, z)[, order(x, -y, z)]
dd <- transform(data.frame(x, y, z),
z = factor(z, labels = LETTERS[9:1]))
dd
order(bb,x)
bb
order(dd,x)
dd[,order(x)]
dd[order(x),]
dd[order(x,y),]
order(iris,Sepal.Length,Sepal.Width)
order(iris,iris$Sepal.Length,Sepal.Width)
order(iris,iris$Sepal.Length,irid$Sepal.Width)
order(iris,iris$Sepal.Length,iris$Sepal.Width)
order(iris,iris$Sepal.Length)
order(iris,Sepal.Length)
order(iris,"Sepal.Length")
order(iris,iris$Sepal.Length)
order(Sepal.Length,Sepal.Width)
order(iris$Sepal.Length,iris$Sepal.Width)
data.frame(a= c(1,2,NA,4,8),b = c(NA,'a','b',NA,NA))
df == NA
df <-data.frame(a= c(1,2,NA,4,8),b = c(NA,'a','b',NA,NA))
df == NA
df
df[df == NA] <- 3
df
is.na(df)
?intersect
intersect(iris,iris)
union(iris,iris)
union(iris,iris) |> as.data.frame()
dim(iris)
union(iris,iris) |> as.data.frame() |> dim()
a <- c("a", "b", "c", "d", "e")
b <- c("d", "e", "f", "g")
union(a,b)
pos <- order(iris$Sepal.Length,iris$Sepal.Width) #ordena por las variables Sepal.Length y Sepal.Width del data.frame iris y devuelve la posición de los elementos ordenados
iris[pos,] #luego puedo hacer indexación con el vector con las posiciones ordenadas
data <- airquality
head(data)
class(data)
#ordena por la primera y segunda columna
result <- data[order(data[,1:2]),]
order(data[,1:2])
data
data[,1:2]
#ordena por la primera y segunda columna
result <- data[order(data[,1]),data[,2]]
head(data)
#ordena por la primera y segunda columna
result <- data[order(data[,1],data[,2])]
#ordena por la primera y segunda columna
result <- data[order(data[,1],data[,2]),]
head(result)
data_info <- read.csv2('data/metadata_estaciones_agrometAPI.csv')
names(data_info)
data_info[ema == id_estacion,]
id_estacion <- 50 #codigo estacion asignada
data_info[ema == id_estacion,]
data_info
str(em)
str(ema)
str(data_info)
data_info[data_info$ema == id_estacion,]
data <- read.csv2('data/50.csv')
data <- read.csv2('data/archivos_csv_por_estacion/50.csv')
data <- read.csv2('data/archivos_csv_por_estacion/50.csv')
data
names(data)
data_temp <- data[,c('fecha_hora','temp_promedio_aire','temp_minima','temp_maxima')]
data_temp
data$fecha_hora
?cor
rnorm(5) + rnorm(3)
rnorm(5) + rnorm(2)
sample(1,1:3)
?sample
sample(1:3,3)
sample(1,3)
sample(1:3,1)
datasets()
datasets
?datasets::
?datasets
library(help = "datasets")
women
women |> class()
airquality
airquality
mtcars
iris
dim(iris)
dim(mtcars)
m <- matrix(1:9,3)
m
m[,1]
m[,1,drop = FALSE]
m <- matrix(1:9,3)
#codigo 2
m[,1,drop = FALSE]
#codigo 1
m[,1]
iris[1:sample(1,150),]
sample(1,150)
sample(150,1)
sample(150,1)
sample(150,1)
sample(150,1)
sample(150,1)
sample(50:150,1)
sample(50:150,1)
sample(50:150,1)
sample(50:150,1)
iris <- iris[1:sample(50:150,1),]
?split()
split(1:4,c('a','a','b','b'))
as.data.frame(split(1:4,c('a','a','b','b')))
iris <- iris[1:sample(50:150,1),]
iris
m1 <- matrix(1:sample(seq(3,12,3),1),3)
m1
m1 <- matrix(1:sample(seq(9,18,3),1),3)
m1
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
matrix(1:sample(seq(9,18,3),1),3)
m1 <- matrix(1:sample(seq(9,18,3),1),3)
m2 <- matrix(1:sample(seq(9,18,3),1),3)
m1
m2
dim(iris)
dim(mtcars)
dim(airquality)
dim(women)
AirPassengers
CO2
CO2 |> class()
PlantGrowth
USArrests
USArrests |> class()
USArrests |> dim()
df <- list(iris,mtcars,airquality,USArrests)
#| eval: true
i <- sample(1:4,1)
df <- list(iris,mtcars,airquality,USArrests)[[i]]
df
sample(ncol(df),3)
cols <- names(df)[sample(ncol(df),3)]
cols
iris
mtcars
airquality
USArrests
sample(nrow(df),5)
data("iris")
iris
summary(iris)
summary(mtcars)
summary(airquality)
summary(USArrests)
state.center
state.center |> class()
sample(5,100)
-50:50[sample(100,5)]
sample(100,5)
(-50:50)[sample(100,5)]
library(agrometR)
library(agrometR)
library(tidyverse)
estaciones_agromet |>
slice_sample(5)
estaciones_agromet |>
slice_sample(n = 5)
data <- get_agro_data(emas,'2023-10-03 00:00:00', '2023-10-03 23:00:00')
estaciones_agromet |>
slice_sample(n = 5) |>
pull(ema) ->emas
data <- get_agro_data(emas,'2023-10-03 00:00:00', '2023-10-03 23:00:00')
data
names(data)
data |>
select(station_id:temp_maxima)
data |>
select(station_id:temp_maxima) |>
nest(-station_id)
data |>
select(station_id:temp_maxima) |>
nest(data = -station_id)
data |>
data |>
select(station_id:temp_maxima) |>
nest(data = -station_id) |>
map2(data,emas,\(x,ema) write_csv(x,paste0('datos_ema_',ema,'.csv')))
data
?map2
data |>
select(station_id:temp_maxima) |>
nest(data = -station_id) |>
map2(data,emas,\(x,ema) write_csv(x,paste0('datos_ema_',ema,'.csv')))
names(data)
lapply(emas,\(x){
data |>
filter(station_id == x) |>
write_csv(paste0('datos_ema_',x,'.csv')))
lapply(emas,\(x){
data |>
filter(station_id == x) |>
write_csv(paste0('datos_ema_',x,'.csv'))
})
estaciones_agromet |>
st_as_sf(coords = c('longitud','latitud'),crs = 4326)
library(sf)
estaciones_agromet |>
st_as_sf(coords = c('longitud','latitud'),crs = 4326)
estas_sf <- estaciones_agromet |>
st_as_sf(coords = c('longitud','latitud'),crs = 4326)
estas_sf
estas_sf |>
slice_sample(n = 5)
estas_sf |>
slice_sample(n = 5) |>
pull(region) -> regs
regs
estas_sf |>
slice_sample(n = 5) |>
pull(region) -> regs
regs
estas_sf |>
group_by(region) |>
slice_sample(n = 5) |>
pull(region) -> regs
regs
estas_sf |>
group_by(region) |>
slice_sample(n = 1) |>
pull(region) -> regs
regs
estas_sf |>
group_by(region) |>
slice_sample(n = .1) |>
pull(region) -> regs
estas_sf$region[sample(16,5)]
estas_sf$region[sample(16,5)]
estas_sf$region[sample(16,5)]
estas_sf$region[sample(16,5,replace = FALSE)]
estas_sf$region[sample(16,5,replace = FALSE)]
unique(estas_sf$region)[sample(16,5,replace = FALSE)]
unique(estas_sf$region)[sample(16,5,replace = FALSE)]
unique(estas_sf$region)[sample(16,5,replace = FALSE)]
regs <- c("Coquimbo",  "Los Lagos", "Los Ríos",  "O'Higgins", "Atacama")
lapply(regs,\(x){
estas_sf |>
filter(region == x) |>
write_sf(paste0('region_',x,'.gpkg'))
})
estas_sf |>
filter(region == x)  |>
plot(x$geometry)
lapply(regs,\(x){
estas_sf |>
filter(region == x)  |>
plot()
})
setwd("~/Documentos/IMSE1017/data_evaluacion_1")
data <- read.csv('datos_ema_49.csv')
data
read.csv('datos_ema_49.csv') |> summary()
read.csv('datos_ema_126.csv') |> summary()
data
data |> names()
read_sf('region_Atacama.gpkg')
read_sf('region_Atacama.gpkg') ->geo
plot(geo[,'comuna'])
#forma 3
iris['Sepal.Lewngth']
#forma 3
iris['Sepal.Length']
#forma 3
iris[,'Sepal.Length']
data <- read.csv('data_5/datos_ema_309.csv')
data
names(data)
data[data$humed_rel_promedio > hum_rel_prom]
data[data$humed_rel_promedio > hum_rel_prom,]
#humedad relativa promedio
hum_rel_prom <- mean(data$humed_rel_promedio,na.rm = TRUE)
data[data$humed_rel_promedio > hum_rel_prom,]
Los objetos sf sirven para almacena estructuras de datos geoespaciales
geo <- read_sf("data_5/region_O'Higgins.gpkg")
#install.packages('sf)
library(sf)
#install.packages('sf)
library(sf)
geo <- read_sf("data_5/region_O'Higgins.gpkg")
geo
st_geometry(geo)
geo
print(geo)
dim(geo)
plot(geo[,'comuna])
plot(geo[,'comuna'])
geo[geo$institucion == 'INIA',]
names(data)
dim(mtcars)
dim(mtcars)
#10.-Haga una union por por columna de las matrices m1 y m2
m1 <- matrix(1:sample(seq(9,18,3),1),3)
m2 <- matrix(1:sample(seq(9,18,3),1),3)
rbind(m1,m2)
mtcars[3]
# Ejercicio 8 Muestre tres formas de indexar la primera columna del data.frame USArrests
USArrests[,1]
USArrests$Murder
#########################################Revisar ############################
index <- which(USArrests$Murder == "Murder")
USArrests[index, 1 ]
USArrests[index, ]
USArrests[, index ]
index
#d.
mtcars4 <- data.frame(mtcars$mpg<21)
mtcars4
vector("numeric",5)
vector('logical',5)
#punto7
LOGIC<- a == 2
which(a==2)
a == 2
vector <- c(3, 6, 9)
#punto7
mi_matriz <- matrix(1:9, nrow = 3, ncol=3)
mi_matriz
vectorlogico <- a == c(1:3)
a
c<- data.frame(mtcars)
lista2 <- list("A", "B", "C")
lista2
mi_lista_principal <- list(vectorlogicoo = vectorlogico, matriz = mi_matriz, datamtcars = c)
mi_lista_principal
vectorlogico <- a == c(1:3)
a
c<- data.frame(mtcars)
lista2 <- list("A", "B", "C")
lista2
mi_lista_principal <- list(vectorlogicoo = vectorlogico, matriz = mi_matriz, datamtcars = c)
vectorlogico <- a == c(1:3)
m1 <- matrix(1:sample(seq(9,18,3),1),3)
m1
primeracoluma <- m1[,1]  #primera columna
m2 <- matrix(1:sample(seq(9,18,3),1),3)
m2
primeracolumaa <- m2[,1] # primera columna
union_interna <- merge(primeracoluma, primeracolumaa)
union_interna
#Cree un nuevo data.frame airquality3 en el que estén solo las filas 56, 29, 31, 27, 147. Hágalo de dos maneras diferentes.
filas_seleccionadas <- c(56, 29, 31, 27, 147)
airquality3 <- subset(airquality, rownames(airquality) %in% filas_seleccionadas)
airquality3
airquality[filas_seleccionadas,]
#1. Cree los siguientes objetos de tipo vector.
exVec1 = c(-34, 16, 38, -19, -40)
exVec1
exVec2 = c(-38, 34, 37, -27, -3)
exVec2
exVec3 = seq(-5, 5, by=0.5)
exVec3
#2.Junte los vectores exVec1 con exVec2 y guardelos en un nuevo vector llamado exVec_resultado (usando una sóla linea). Muestre el resultado.
exVec1 = c(-34, 16, 38, -19, -40)
exVec2 = c(-38, 34, 37, -27, -3)
exVec_resultado = as.numeric(rbind(exVec1, exVec2))
exVec_resultado
#forma 1
USArrests$Murder       ####revisar si me queda tiempo
#forma 2
USArrests [c(1)]
#forma 3
USArrests [c("Murder")]
mtcars
structure(mtcars)
structure
structure(mtcars)
