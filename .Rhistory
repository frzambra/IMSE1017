# cantidad de variables
nrow(cuencas)
cuencas <- read_sf('../data/cuencas_Chile/Cuencas_BNA.shp')
cuencas
nrow(cuencas)
ncol(cuencas)
prec <- rast('../data/CHELSA_pr_v2.1_20190101.tif')
library(terra)
prec <- rast('../data/CHELSA_pr_v2.1_20190101.tif')
prec
prec <- rast('../data/CHELSA_pr_v2.1_20190101.tif')
estaciones <- read_sf('../data/estaciones_chile/estaciones_chile.shp')
prec <- rast('../data/CHELSA_pr_v2.1_20190101.tif')
prec
crs(prec)
crs(prec)$epsg
crs(prec)
str(crs(prec))
EPSG(prec)
?epsg
??epsg
?st_crs(prec)
st_crs(prec)
st_crs(prec)$epsg
cuencas$NOM_CUEN == 'Río Limarí'
cuencas$NOM_CUEN == 'Río Limarí' |> any
cuencas$NOM_CUEN == 'Río Limarí' |> any()
cuencas$NOM_CUEN
cuencas$NOM_CUEN |> unique()
cuencas$NOM_CUEN |> unique() |> grepl('Limari')
cuencas$NOM_CUEN |> unique() |> grepl('Limarí')
?grepl
cuencas$NOM_CUEN |> unique() |> grepl(x='Limarí')
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Limarí')
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Limari')
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Limari') |> which()
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Limari') |> which() -> i
cuencas[i,]
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Elqui') |> which() -> i
i
cuencas[i,]
cuencas$NOM_CUEN
cuenca_limari <- cuencas[cuencas$NOM_CUEN == "Rio Limari",]
prec_limari <- crop(prec,cuenca_limari)
cuenca_limari <- cuencas[cuencas$NOM_CUEN == "Rio Limari",]
cuenca_limari
"Rio Limari"
cuenca_limari
#transforma SRC de vectorial a raster
cuenca_limari <- st_transform(cuenca_limari,st_crs(prec))
# hace el crop, mask y trim
prec_limari <- crop(prec,cuenca_limari)
prec_limari <- mask(prec_limari,cuenca_limari)
prec_limari <- trim(prec_limari,cuenca_limari)
prec_limari
plot(prec_limari)
st_crs(estaciones)
st_crs(prec)
st_crs(prec)
st_crs(estaciones)
#transforma SRC de vectorial a raster
cuenca_limari <- st_transform(cuenca_limari,st_crs(prec))
estaciones_cuenca <- st_intersection(estaciones,cuenca_limari)
st_crs(estaciones)
st_crs(cuenca_limari)
x
library(terra)
x <- rast()
x
setwd("/media/francisco/0A475C3F09F86BE3/PRODUCTOS/ROSA SOFRUCO")
library(terra)
im <- rast('OMROSA SOFRUCO 24-11-2022.tif')
plot(im)
plotRGB(im)
im2 <- terra::aggregate(im,5)
im2
res(im2)
plotRGB(im2)
nlyr(im2)
im2[[4]] <- NULL
im2 <- subst(im2,1:3)
im2 <- subst(im2,1,3)
im2
plot(im2)
plotRGB(im2)
writeRaster(im2,'~/Descargas/la_esperanza.tif')
im2 <- terra::aggregate(im2,5)
plotRGB(im2)
writeRaster(im2,'~/Descargas/la_esperanza2.tif')
res(im2)
plotRGB(im2)
plotRGB(im2)
library(tmap)
tmap_mode('view')
tm_shape(im2) + tm_raster()
tm_shape(im2) + tm_rgb()
im3 <- rast('~/Descargas/la_esperanza2.tif')
plotRGB(im3)
rc <- rast('OM RIO CLARO 24-11-2022.tif')
getwd()
ls()
lis.files()
list.files()
list.files()
setwd("/media/francisco/0A475C3F09F86BE3/PRODUCTOS/RIO CLARO")
rc <- rast('OM RIO CLARO 24-11-2022.tif')
rc2 <- aggregate(rc,10)
plotRGB(rc2)
rc2 <- subst(rc2,1,3)
writeRaster(rc2,'~/Descargas/rio_claro.tif')
res(im2)
res(rc2)
res(rc2)/res(im2)
1/res(rc2)/res(im2)
res(rc2)/res(im2)
1/.3946
rc2 <- aggregate(rc2,2.53)
writeRaster(rc2,'~/Descargas/rio_claro.tif')
writeRaster(rc2,'~/Descargas/rio_claro.tif',overwrite = TRUE)
res(rc2)
res(im2)
x <- c(1, 'a', 5)
class(x)
m <- matrix(1:20,ncol=4)
m
m[2:3,2:3]
month.name
days
df <- data.frame(meses = month.name,
n_caracteres =nchar(month.name),
)
df <- data.frame(meses = month.name,
n_caracteres =nchar(month.name)
)
df
iris
mtcars
datasets::data()
datasets()
dataset()
data
data("AirPassengers")
AirPassengers
?datasets
iris
?data
data()                         # list all available data sets
Titanic
USArrests
airquality
co""
co2
iris3
volcano
rast(volcano)
library(terra)
rast(volcano)
plot(rast(volcano))
trees
women
occupationalStatus
cars
UCBAdmissions
Nile
OrchardSprays
iris[sample(1:150,20),]
df[df$Species == 'setosa',]
df$Species
df
df <- iris[sample(1:150,20),]
df[df$Species == 'setosa',]
r <- rast(ncol=4,nrow=4,crs=4326)
r <- rast(ncol=4,nrow=4,crs="EPSG:4326")
r
r <- rast(ncol=4,nrow=4,crs="EPSG:4326")
getd()
getwd()
read_sf('Evaluaciones/data/estaciones_chile')
library(sf)
read_sf('Evaluaciones/data/estaciones_chile')
estas <- read_sf('Evaluaciones/data/estaciones_chile')
estas
names(estas)
estas$region
estas$region
estas
estas$region
|> unique()
estas$region |> unique()
cuenca_limari <- read_sf('Evaluaciones/data/cuenca_limari.shp')
cuenca_limari
estas
st_intersection(estas,cuenca_limari)
st_crs(cuenca_limari)
st_crs(cuenca_limari)$epsg
st_crs(cuenca_limari)
st_crs(estas)
st_crs(cuenca_limari)
cuenca_limari <- st_transform(cuenca_limari,st_crs(estas))
cuenca_limari
st_intersection(estas,cuenca_limari)
estas_limari <-st_intersection(estas,cuenca_limari)
estas_limari
df_estas_limari <- st_drop_geometry(estas_limari)
names(df_estas_limari)
df_estas_limari <- df_estas_limari[,1:4]
df_estas_limari
estas <- read_sf('Evaluaciones/data/estaciones_chile')
df_estas <- st_drop_geometry(estas)
df_estas
df_estas <- df_estas[,1:4]
df_estas
write_csv2(df_estas,'Evaluaciones/data/data_estaciones.csv')
write.csv2(df_estas,'Evaluaciones/data/data_estaciones.csv')
df_estaciones <- read.csv2('../data/data_estaciones.csv')
df_estaciones
df_estaciones
sf_estaciones <- st_as_sf(df_estaciones,coords = c('longitud','latitud'),crs =4326)
estas <- read_sf('Evaluaciones/data/estaciones_chile')
library(dplyr)
drop_na(estas)
library(tidyr)
drop_na(estas)
estas <- drop_na(estas)
df_estas <- st_drop_geometry(estas)
df_estas <- df_estas[,1:4]
write.csv2(df_estas,'Evaluaciones/data/data_estaciones.csv')
df_estaciones <- read.csv2('../data/data_estaciones.csv')
sf_estaciones <- st_as_sf(df_estaciones,coords = c('longitud','latitud'),crs =4326)
sf_estaciones
cuencas <- read_sf('../data/cuencas_Chile')
cuencas
cuencas$NOM_CUEN
cuencas$NOM_CUEN |> unique()
cuencas
st_crs(cuencas)
estas
cuencas[cuencas$NOM_CUEN == 'Rio Imperial',]
estas_imperial <- st_intersection(estas,cuenca_imperial)
cuenca_imperial <- cuencas[cuencas$NOM_CUEN == 'Rio Imperial',]
estas_imperial <- st_intersection(estas,cuenca_imperial)
cuencas <- read_sf('../data/cuencas_Chile')
cuencas <- st_transform(cuencas,st_crs(estas))
cuenca_imperial <- cuencas[cuencas$NOM_CUEN == 'Rio Imperial',]
estas_imperial <- st_intersection(estas,cuenca_imperial)
estas_imperial
plot(estas_imperial$geometry)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
library(elevatr)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
library(elevatr)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
install.packages('rgdal')
library(elevatr)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
elev_dem <- extract(dem,estas_imperial)
library(elevatr)
plot(dem_imperial)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
?tm_grid
library(tmap)
tm_grid
?tm_grid
iris
df['Petal.Length']
iris['Petal.Length']
library(terra)
library(sf)
library(tmap)
library(elevatr)
library(rgdal)
library(terra)
library(sf)
library(tmap)
library(elevatr)
library(rgdal)
df_estaciones <- read_sf("data_estaciones.csv")
df_estaciones <- read.csv2("data_estaciones.csv")
setwd("~/OneDrive/UMayor/Escuelas/MedioAmbiente/2022/2do_semestre/IMSE1017/Evaluaciones/Examen")
library(terra)
library(sf)
library(tmap)
library(elevatr)
library(rgdal)
df_estaciones <- read_sf("data_estaciones.csv")
df_estaciones <- read.csv2("data_estaciones.csv")
df_estaciones
sf_estaciones <- st_as_sf(df_estaciones,coords = c("latitud","longitud","altitud"))
sf_estaciones
plot(sf_estaciones$geometry)
cuenca_Imperial <- st_transform(cuenca_Imperial,4326)
head(df_estaciones)
sf_estaciones <- st_set_crs(sf_estaciones,4326)
cuenca <- read_sf('cuencas_Chile/Cuencas_BNA.shp')
cuenca_Imperial <- cuenca[cuenca$NOM_CUEN == "Rio Imperial",]
cuenca_Imperial
plot(cuenca_Imperial$geometry)
sf_estaciones <- st_transform(sf_estaciones,st_crs(cuenca_Imperial))
estaciones_cuenca <- st_intersection(sf_estaciones,cuenca_Imperial)
estaciones_cuenca
estaciones_cuenca |> nrow()
estaciones_cuenca |> ncol()
library(elevatr)
library(progress)
dem <- get_elev_raster(cuenca_Imperial,z=9)
cuenca_Imperial
dem <- get_elev_raster(cuenca_Imperial,z=9)
cuenca_Imperial
dem_imperial <- get_elev_raster(cuenca_Imperial,z=9)
dem_imperial1 <- trim(mask(dem_imperial,cuenca_Imperial))
dem_imperial1 <- rast(dem_imperial1)
slope = terrain(dem_imperial1, v='slope',unit = 'radians')
aspect = terrain(dem_imperial1, v='aspect',unit = 'radians')
hill = shade(slope, aspect)
library(tmap)
tmap mode set to plotting
mapa <- tm_shape(hill) +
tm_raster(style = 'cont',palette = grey(0:100/100),legend.show = FALSE) +
tm_shape(dem_imperial1) +
tm_raster(title= 'Elevación (m)', style ='cont',palette = rev(topo.colors(20)),alpha = .4) +
tm_graticules(lwd = .4,alpha = .6) +
tm_compass(position = c('right','top'))
mapa2 <- tm_shape(cuenca_Imperial) +
tm_borders() +
tm_shape(estaciones_cuenca,size=3) +
tm_dots()
mapa <- mapa+mapa2
tmap_mode('view')
plot(mapa)
dem <- get_elev_raster(cuenca_Imperial,z=9)
cuenca_Imperial
sf_estaciones
library(sf)
library(terra)
library(raster)
library(progress)
library(rgdal)
library(elevatr)
library(tmap)
#lea el archivo y asignelo a al obejto df_estaciones
df_estaciones<-read.csv2('data_estaciones.csv')
#convierte el objeto df_estaciones en un objeto sf y asignele coordenadas geograficas asignelo al objeto sf_estaciones(profe lo asignare a sf_estaciones1)
sf_estaciones1<-st_as_sf(df_estaciones)
st_as_sf(objeto,coords=c("longitud","latitud",))
cuencas<-read_sf('cuencas_Chile')
cuencas2<-st_transform(cuencas,4326)
cuencaRI<-cuencas2[cuencas2$NOM_CUEN=='rio Imperial']
intersec<-st_intersection(sf_estaciones,cuencaRI)
estaciones<-Intersec
plot(st_geometry(cuencaRI))
plot(estaciones$geometry,add=TRUE)
#4 utilice el paquete elevart y asignelo al objeto dem_imperial
dem_imperial<-get_elev_raster(cuencaRI,z=10)
dem_imperial<-rast(dem_imperial)
#6 cree un mapa de sombras
#primero hareos una mascara del dem eliminando los espacios en blanco
na.omit(cuencaRI)
maskRI<-mask(dem,cuencaRI)
plot(maskRI)
RI<-trim(maskRI)
plot(RI)
#para crear el mapa partimos por crear un raster de aspecto y slope utilizando las funciones terrain y shade
slope=terrain(RI,v='slope',unit='radians')
aspect=terrain(RI,v='aspect',unit='radians')
hill=shade(slope,aspect)
plot(hill)
#utilizamos tmap
tmap_mode('plot')
mapa<-tm-shape(hill)+tm_raster(style='cont',palette=grey(0:100/100),legend.show=FALSE)+tm_shape(dem_imperial)+tm_raster(title = 'Elevacion(m)',style='cont',palette = rev(topo.colors(20)),alpha=.6)+tm_compass(position=c('ringht','top'))mapa
#agregar limites de la cuenca y estaciones(mapa de los bordes de la cuenca)
bordes<-st_union(cuencaRI$geometry)
mapabordes<-tm_shape(bordes)+tm_borders(lw=4)
mapabordes
#agregar al mapa las estaciones que corresponden
mapaestaciones<-mapabordes+tm_shape(estaciones)+tm_dots
mapaestaciones
#unir el mapa del punto anterior con el de los limites de la cuenca y las estaciones
mapa3RI<-mapabordes+mapaestaciones
mapa3RI
#7 cree un mapa estatico con tmap. debe contener leyenda....
tmap_mode("plot")
mapa3RI
library(sf)
library(terra)
library(raster)
library(tmap)
library(elevatr)
#Lea el archivo en R y asígnelo al objeto df_estaciones
df_estaciones <- read.csv2("data_estaciones.csv")
df_estaciones
sf_estaciones <- st_as_sf(df_estaciones)
sf_estaciones<-st_transform(sf_estaciones, 4326)
#Utilice el archivoCuencas_BNA y seleccione las estaciones que se encuentran en la cuenca del río Imperial.
Cuencas_BNA<- read_sf('cuencas_Chile')
cuencas_ri <- Cuencas_BNA[Cuencas_BNA$NOM_CUEN == 'Rio Imperial',]
int <- st_intersection(sf_estaciones, cuencas_ri)
sf_estaciones <- st_as_sf(df_estaciones,coords = c('longitud','latitud'),crs=4326)
sf_estaciones
#Utilice el archivoCuencas_BNA y seleccione las estaciones que se encuentran en la cuenca del río Imperial.
Cuencas_BNA<- read_sf('cuencas_Chile')
cuencas_ri <- Cuencas_BNA[Cuencas_BNA$NOM_CUEN == 'Rio Imperial',]
int <- st_intersection(sf_estaciones, cuencas_ri)
#Utilice el paquete {elevatr} para descargar datos de elevación para la cuenca del río Imperial. Asignelo al objeto dem_imperial.
dem_imperial <- get_elev_raster(cuencas_ri)
intersect(iris,risi)
intersect(iris,iris)
?intersect
a = c(10,20,10,10,40,50,20,30)
b = c(10,30,10,20,0,50,30,30)
print("Original data frame:")
ab = data.frame(a,b)
print(ab)
print("Duplicate elements of the said data frame:")
print(duplicated(ab))
?list
list(1,2,dimmnames=c('a','b'))
a <-list(1,2,dimmnames=c('a','b'))
a
a <-list(1,2,names=c('a','b'))
a
names(a)
l1 <- list(1)
l2 <- list(2)
c(l1,l2)
list(l1,l2)
f1 <- factor(sample(LETTERS, size=6, replace=TRUE))
f2 <- factor(sample(LETTERS, size=6, replace=TRUE))
print("Original factors:")
print(f1)
print(f2)
f = factor(c(levels(f1)[f1], levels(f2)[f2]))
f1
f2
f
library(agrometR)
library(agrometR)
estaciones_agromet
sample(estaciones_agromet$ema,5)
ids <- sample(estaciones_agromet$ema,5)
ids
data <- get_agro_data(ids,as.POSIXct("2023-08-03 09:00"),as.POSIXct("2023-08-03 12:00"))
data
estaciones_agromet
data
?get_agro_data
sessionInfo()
sessionInfo()
?get_agro_data
estaciones_agromet$ema
ids
set.seed(454)
ids <- sample(estaciones_agromet$ema,5)
ids
data
estaciones_agromet
estaciones_agromet
x <- 1:10
# funciones anidadas
sqrt(mean(x))
x |>
mean() |>
sqrt()
library(tidyverse)
filter
library(terra)
r <- rast('/vsicurl/https://data.chc.ucsb.edu/products/CHIRPS-2.0/global_annual/tifs/chirps-v2.0.2022.tif')
r <- rast('/vsicurl/https://data.chc.ucsb.edu/products/CHIRPS-2.0/global_pentad/cogs/chirps-v2.0.2023.07.6.cog')
plot(r)
library(agrometR)
estaciones_agromet
estaciones_agromet |> distinct(region)
library(tidyverse)
estaciones_agromet |> distinct(region)
estaciones_agromet |> filter(region == 'Metropolitana')
estaciones_agromet |>
filter(region == 'Metropolitana') |>
pull(ema) ->ids
ids
get_agro_data(ids,"2023-09-08","2023-09-11")
data <- get_agro_data(ids,"2023-09-08","2023-09-11")
data
data |> drop_na()
data <- get_agro_data(ids,ymd("2023-09-08"),ymd("2023-09-11"))
data
data |> drop_na()
data <- get_agro_data(ids,ymd("2023-09-01"),ymd("2023-09-11"))
data
data |> drop_na()
data <- get_agro_data(ids,ymd("2023-08-01"),ymd("2023-08-11"))
data
data |> drop_na()
data <- get_agro_data(ids,as_datetime("2023-08-01"),as_datetime("2023-08-11"))
data
data |> drop_na()
order(iris$Sepal.Length,iris$Sepal.Width)
order(iris$Sepal.Length)
?order
estaciones_agromet |> write_csv2('~/Descargas/estaciones_agromet.csv')
data <- read.csv2('data/estaciones_agromet.csv')
data
getwd()
ruta <- "/home/francisco/OneDrive/R-projects/Clases/IMSE1017/data/estaciones_agromet.csv"
ruta
?read.csv
# utilizando ruta absoluta
ruta <- "/home/francisco/OneDrive/R-projects/Clases/IMSE1017/data/estaciones_agromet.csv"
data <- read.csv2(ruta)
data
str(data)
getwd()
# utilizando ruta absoluta
ruta <- "/home/francisco/OneDrive/R-projects/Clases/IMSE1017/data/estaciones_agromet.csv"
