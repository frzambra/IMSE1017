<<<<<<< HEAD
# cantidad de variables
nrow(cuencas)
cuencas <- read_sf('../data/cuencas_Chile/Cuencas_BNA.shp')
cuencas
nrow(cuencas)
ncol(cuencas)
prec <- rast('../data/CHELSA_pr_v2.1_20190101.tif')
library(terra)
prec <- rast('../data/CHELSA_pr_v2.1_20190101.tif')
prec
prec <- rast('../data/CHELSA_pr_v2.1_20190101.tif')
estaciones <- read_sf('../data/estaciones_chile/estaciones_chile.shp')
prec <- rast('../data/CHELSA_pr_v2.1_20190101.tif')
prec
crs(prec)
crs(prec)$epsg
crs(prec)
str(crs(prec))
EPSG(prec)
?epsg
??epsg
?st_crs(prec)
st_crs(prec)
st_crs(prec)$epsg
cuencas$NOM_CUEN == 'Río Limarí'
cuencas$NOM_CUEN == 'Río Limarí' |> any
cuencas$NOM_CUEN == 'Río Limarí' |> any()
cuencas$NOM_CUEN
cuencas$NOM_CUEN |> unique()
cuencas$NOM_CUEN |> unique() |> grepl('Limari')
cuencas$NOM_CUEN |> unique() |> grepl('Limarí')
?grepl
cuencas$NOM_CUEN |> unique() |> grepl(x='Limarí')
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Limarí')
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Limari')
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Limari') |> which()
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Limari') |> which() -> i
cuencas[i,]
cuencas$NOM_CUEN |> unique() |> grepl(pattern ='Elqui') |> which() -> i
i
cuencas[i,]
cuencas$NOM_CUEN
cuenca_limari <- cuencas[cuencas$NOM_CUEN == "Rio Limari",]
prec_limari <- crop(prec,cuenca_limari)
cuenca_limari <- cuencas[cuencas$NOM_CUEN == "Rio Limari",]
cuenca_limari
"Rio Limari"
cuenca_limari
#transforma SRC de vectorial a raster
cuenca_limari <- st_transform(cuenca_limari,st_crs(prec))
# hace el crop, mask y trim
prec_limari <- crop(prec,cuenca_limari)
prec_limari <- mask(prec_limari,cuenca_limari)
prec_limari <- trim(prec_limari,cuenca_limari)
prec_limari
plot(prec_limari)
st_crs(estaciones)
st_crs(prec)
st_crs(prec)
st_crs(estaciones)
#transforma SRC de vectorial a raster
cuenca_limari <- st_transform(cuenca_limari,st_crs(prec))
estaciones_cuenca <- st_intersection(estaciones,cuenca_limari)
st_crs(estaciones)
st_crs(cuenca_limari)
x
library(terra)
x <- rast()
x
setwd("/media/francisco/0A475C3F09F86BE3/PRODUCTOS/ROSA SOFRUCO")
library(terra)
im <- rast('OMROSA SOFRUCO 24-11-2022.tif')
plot(im)
plotRGB(im)
im2 <- terra::aggregate(im,5)
im2
res(im2)
plotRGB(im2)
nlyr(im2)
im2[[4]] <- NULL
im2 <- subst(im2,1:3)
im2 <- subst(im2,1,3)
im2
plot(im2)
plotRGB(im2)
writeRaster(im2,'~/Descargas/la_esperanza.tif')
im2 <- terra::aggregate(im2,5)
plotRGB(im2)
writeRaster(im2,'~/Descargas/la_esperanza2.tif')
res(im2)
plotRGB(im2)
plotRGB(im2)
library(tmap)
tmap_mode('view')
tm_shape(im2) + tm_raster()
tm_shape(im2) + tm_rgb()
im3 <- rast('~/Descargas/la_esperanza2.tif')
plotRGB(im3)
rc <- rast('OM RIO CLARO 24-11-2022.tif')
getwd()
ls()
lis.files()
list.files()
list.files()
setwd("/media/francisco/0A475C3F09F86BE3/PRODUCTOS/RIO CLARO")
rc <- rast('OM RIO CLARO 24-11-2022.tif')
rc2 <- aggregate(rc,10)
plotRGB(rc2)
rc2 <- subst(rc2,1,3)
writeRaster(rc2,'~/Descargas/rio_claro.tif')
res(im2)
res(rc2)
res(rc2)/res(im2)
1/res(rc2)/res(im2)
res(rc2)/res(im2)
1/.3946
rc2 <- aggregate(rc2,2.53)
writeRaster(rc2,'~/Descargas/rio_claro.tif')
writeRaster(rc2,'~/Descargas/rio_claro.tif',overwrite = TRUE)
res(rc2)
res(im2)
x <- c(1, 'a', 5)
class(x)
m <- matrix(1:20,ncol=4)
m
m[2:3,2:3]
month.name
days
df <- data.frame(meses = month.name,
n_caracteres =nchar(month.name),
=======
#18Escriba un programa en R para crear un vector usando el operador : y la función seq().
seq(from=0, to=1, length.out=11)
#1Escriba un programa R para encontrar los niveles de factor de un vector dado.
class(iris$Species)
levels(iris$Species)
f<-factor(c("a","a","b","b","c","c"), levels = c("a","b","c"))
levels(f)
data.frame(medicion1=1:6,f)
#2Escriba un programa R para cambiar el primer nivel de un factor con otro nivel de un factor dado.
levels(f)[1]<-levels(iris$Species)[1]
f
#3Escriba un programa en R para crear un factor ordenado a partir de datos que consisten en los nombres de los meses.
m<-factor(month.name)
f<-factor(month.name, levels = month.name)
levels(f)
#4Escriba un programa R para extraer los cinco niveles de factor creados a partir de una muestra aleatoria de las letters (parte de la distribución base R).
set.seed(123)#valores aleatorias reproducibles
let<-sample(letters,5)
letf<-factor(let)
levels(letf)
#5Escriba un programa en R para crear un factor correspondiente al conjunto de datos de la altura de las mujeres, que contenga la altura y el peso de una muestra de mujeres.
grupos<-factor(c("G1","G1","G2","G2"))
altura<-c(1.67,1.65,1.68,1.57)
pesos<-c(56,62,68,54)
df<-data.frame(pesos,altura,grupos)
str(df) #entrega la estructura
#1Escriba un programa en R para crear una matriz en blanco.
m1<-matrix(ncol=2,nrow = 2)
m1
#2Escriba un programa en R para crear una matriz tomando como entrada un vector dado de números. Muestre la matriz.
m3<- matrix(1:10,ncol=2,nrow= 5)
m3
m4<- matrix(1:10,2,5)
m4
v1<- seq(5,100,5)
m5<- matrix(1:10,5,2)
m5
#3Escriba un programa en R para crear una matriz que tome un vector dado de números como entrada y defina los nombres de columna y fila. Muestre la matriz.
matriz2<-matrix(1:4,nrow=2,ncol=2)
colnames(matriz2)<-c("columna","columna")
rownames(matriz2)<-c("fila","fila")
matriz2
#4Escriba un programa en R para crear dos matrices de 2x3, luego sume, reste, multiplique y divida las matrices.
a<-matrix(1:6,nrow=2,ncol=3)
a
b<-matrix(c(10,8,5,12,3,5), ncol = 3, byrow = TRUE)
b
a+b
a-b
a*b
a/b
#5Escriba un programa en R para crear una matriz de correlación a partir de un data.frame del mismo tipo de datos.
cor(mtcars)
#6Escriba un programa R para encontrar el índice de fila y columna de valor máximo y mínimo en una matriz dada.
B <- matrix(c(10, 8,5, 12,3,5), ncol = 3, byrow = TRUE)
max(B)
min(B)
#7Escriba un programa R para concatenar dos matrices dadas de la misma columna pero filas diferentes.
A<-matrix(1:6,nrow = 2,ncol = 3)
A
B<-matrix(1:12,nrow = 4,ncol = 3)
B
rbind(A,B)
x <-20:50
x1 <- 20:60
mean (x1)
mean(20:60)
x2 <- 51:91
sum(x2)
sum(51:91)
n <- rnorm(100000,mean = 100,sd=10)
mean(n)
sd(n)
n<- rnorm(1000)
length(n)
hist(n)
#6.Escriba un programa R para crear una lista de elementos usando vectores, matrices y funciones. Imprime el contenido de la lista.
v<-c(1,2,3,4,5)
m<-matrix(1:9,nrow=3)
f<-function(x){return(x*2)}
l<-list(vector=v,matrix=m,funcion=f)
l
#7. Escriba un programa en R para crear una matriz de 5 x 4, una matriz de 3 x 3 con etiquetas y rellene la matriz por filas y una matriz de 2 x 2 con etiquetas y rellene la matriz por columnas.
ma <- matrix(1:20, nrow = 5, ncol = 4)
ma
maet <- matrix(1:9, nrow = 3, byrow = TRUE, dimnames = list(c("Fila1", "Fila2", "Fila3"), c("Col1", "Col2", "Col3")))
maet
macol<- matrix(1:4, nrow = 2, byrow = FALSE, dimnames = list(c("FilaA", "FilaB"), c("ColX", "ColY")))
macol
#10. Escriba un programa R para crear un `data.frame` que contenga detalles (genero, edad, rut, dirección, profesión) de 5 empleados y muestre un resumen de los datos.
empleados <- data.frame(
Genero = c("Hombre", "Mujer", "Hombre", "Mujer", "Mujer"),
Edad = c(30, 25, 35, 28, 33),
Rut = c("12345678-9", "98765432-1", "56789012-3", "34567890-1", "23456789-0"),
Direccion = c("Enerto Pinto #1253", "Avenida Libertad #1456", "Calle El Periodista #7892", "Avenida D #101", "Calle E #222"),
Profesion = c("Ingeniero", "Doctora", "Veterinario", "Abogada", "Profesora")
>>>>>>> 94916ea (agregar evaluación 1 taller)
)
empleados
summary(empleados)
#vectores numéricos
n<- 1:6
n2 <- c(1,7,3,7,9,5)
n3 <- seq(8,200,length.out=6)
l <- c(TRUE,FALSE,TRUE,FALSE,FALSE,TRUE)
l2 <- rep(TRUE,6)
l3 <-rep(TRUE,2)
l4 <- c(13,TRUE,FALSE,TRUE)
l4
c(1i,2+1i,1i,-1i,3+2i,4-2i)
c1 <- c("abcd","bcd","cef","ghi","jkl","mno")
c2 <- c("abcd","bcd","cef")
c3<- c("ghi","jkl","mno")
c4<- c(c2,c3)
identical(c1,c4)
j <- c(1L,2L,3L)
j1 <-c(4L,5L,6L)
j+j1
j+j1
x <- rnorm(10)
x <- c(1,5,6,8,15,22,37)
x <- 60:100
x<- seq(5,100,10)
sum(x)
mean(x)
prod(x)
x<- c(NA,1:10)
sum(x,na.rm=TRUE)
sum(x,na.rm=TRUE)
mean(x,na.rm=TRUE)
prod(x,na.rm=TRUE)
v <- c(5,4,2,1,8,90,45)
sort(v)
sort(v,decreasing = TRUE)
order(v)
v[c(4,3,2,1,5,7,6)]
v[order(v)]
v[order(v,decreasing = TRUE)]
v<- 1:10
v
v== 4
4 %in% v
c(4,6,23) %in% v
c ("a","ñ") %in% letters
v <- c(5,4,2,1,8,90,45)
f<-seq(1,100,10)
vector_ordenado_dec <-sort(f,decreasing=TRUE)
vector_ordenado_dec[2]
vector_ordenado_dec[5]
f
segundo_valor_mas_alto<-vector_ordenado_dec[2]
segundo_valor_mas_alto
v1<-iris$Sepal.Length
v1<-iris[,1]
v1<-iris[,"Sepal.Length"]
v2<-iris$Sepal.Width
v2<-iris[,2]
v2<-iris[,"Sepal.Width"]
v3<-iris$Sepal.Length
v3<-iris[,"Species"]
class(v1)
class(v2)
class(v3)
v1<-c(50,100)
v2<-1:10
v1
v2
setdiff(v1,v2)
x<-1:10
rev(x)
#15.Escriba un programa en R para crear un vector y encuentre la longitud y la dimensión del vector.
v<-seq(6,25,3)
length(v)
dim(v)
#16.Escriba un programa R para probar si el valor del elemento de un vector dado es mayor que 10 o no. Devuelve TRUE o FALSE.
i<-1
v[i]>10
#17.Escriba un programa en R para sumar 3 a cada elemento en un vector dado. Imprime el vector original y el nuevo.
v<-1:5
v
v_suma3<-v+3
v_suma3
v<-c(1,2,3,4,5)
v<-1:1000
v<- seq(1,100,5)
#18.Escriba un programa en R para crear un vector usando el operador : y la función seq().
# Crear un vector del 1 al 10 usando la función seq()
m1<- seq(from = 1, to = 10, by = 1)
cat("Vector creado con la función seq(): ", m1, "\n")
#1.Escriba un programa R para encontrar los niveles de factor de un vector dado.
f1<-iris$Species
class(iris$Species)
levels(iris$Species)
class(f1)
levels(f1)
f<-factor(
c('a','a','b','b','c','c'),
levels=c('a','b','c')
)
#2.Escriba un programa R para cambiar el primer nivel de un factor con otro nivel de un factor dado.
levels(f)[1]<-levels(iris$Species)[1]
f
#3.Escriba un programa en R para crear un factor ordenado a partir de datos que consisten en los nombres de los meses.
m<-month.name
f<-factor(month.name,levels=month.name)
levels(f)
f1<-factor(month.name,ordered=TRUE)
levels(f1)
#4.Escriba un programa R para extraer los cinco niveles de factor creados a partir de una muestra aleatoria de las letters (parte de la distribución base R).
set.seed(123)
rnorm(3)
let<-sample(letters,5)
letf<-factor(let)
levels(letf)
#5.Escriba un programa en R para crear un factor correspondiente al conjunto de datos de la altura de las mujeres, que contenga la altura y el peso de una muestra de mujeres.
grupos<-factor(c('g1','g1','g2','g2'))
altura<-c(1.67,1.65,1.68,1.57)
pesos<-c(56,62,68,54)
df<-data.frame(pesos,altura,grupos)
str(df)
class(df$pesos)
length(df$pesos)
class(df$grupos)
#1.Escriba un programa en R para crear una matriz en blanco.
m1<-matrix(ncol=2,nrow=2)
m2<-matrix(c('','','',''),ncol=2,nrow=2)
m1
m2
m3<-matrix(1:10,ncol=2,nrow=5)
m4<-matrix(1:10,2,5)
m3
m4
v1<-seq(5,100,5)
v1
m5<-matrix(v1,5)
m5
matrix(1:10,3,3)
#3.scriba un programa en R para crear una matriz que tome un vector dado de números como entrada y defina los nombres de columna y fila. Muestre la matriz.
# Crear un vector de números
j<- c(1, 2, 3, 4, 5)
j1<- c("Fila1", "Fila2")
j2 <- c("Columna1", "Columna2", "Columna3", "Columna4", "Columna5")
t<- matrix(j,nrow = length(j1), ncol = length(j2))
rownames(t) <- j1
colnames(t) <- j2
cat("Matriz creada:\n")
print(t)
#4.Escriba un programa en R para crear dos matrices de 2x3, luego sume, reste, multiplique y divida las matrices.
# Crear dos matrices de 2x3
b1<- matrix(1:6, nrow = 2)
b2<- matrix(7:12, nrow = 2)
b1
d<- b1 + b2
d1 <- b1 - b2
d2 <- b1* b2
d3<- b1 / b2
b1
b2
d
d1
d2
d3
#5.Escriba un programa en R para crear una matriz de correlación a partir de un data.frame del mismo tipo de datos.
# Crear un data.frame de ejemplo
w<- data.frame(A = c(1, 2, 3, 4, 5),B = c(2, 3, 4, 5, 6),C = c(3, 4, 5, 6, 7))
w1<- cor(w)
print(w1)
#6.Escriba un programa R para encontrar el índice de fila y columna de valor máximo y mínimo en una matriz dada.
r <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)
r1 <- which(r == max(r), arr.ind = TRUE)
r1
# Encontrar el índice del valor mínimo
r2 <- which(r == min(r), arr.ind = TRUE)
r
<<<<<<< HEAD
r <- rast(ncol=4,nrow=4,crs="EPSG:4326")
getd()
getwd()
read_sf('Evaluaciones/data/estaciones_chile')
library(sf)
read_sf('Evaluaciones/data/estaciones_chile')
estas <- read_sf('Evaluaciones/data/estaciones_chile')
estas
names(estas)
estas$region
estas$region
estas
estas$region
|> unique()
estas$region |> unique()
cuenca_limari <- read_sf('Evaluaciones/data/cuenca_limari.shp')
cuenca_limari
estas
st_intersection(estas,cuenca_limari)
st_crs(cuenca_limari)
st_crs(cuenca_limari)$epsg
st_crs(cuenca_limari)
st_crs(estas)
st_crs(cuenca_limari)
cuenca_limari <- st_transform(cuenca_limari,st_crs(estas))
cuenca_limari
st_intersection(estas,cuenca_limari)
estas_limari <-st_intersection(estas,cuenca_limari)
estas_limari
df_estas_limari <- st_drop_geometry(estas_limari)
names(df_estas_limari)
df_estas_limari <- df_estas_limari[,1:4]
df_estas_limari
estas <- read_sf('Evaluaciones/data/estaciones_chile')
df_estas <- st_drop_geometry(estas)
df_estas
df_estas <- df_estas[,1:4]
df_estas
write_csv2(df_estas,'Evaluaciones/data/data_estaciones.csv')
write.csv2(df_estas,'Evaluaciones/data/data_estaciones.csv')
df_estaciones <- read.csv2('../data/data_estaciones.csv')
df_estaciones
df_estaciones
sf_estaciones <- st_as_sf(df_estaciones,coords = c('longitud','latitud'),crs =4326)
estas <- read_sf('Evaluaciones/data/estaciones_chile')
library(dplyr)
drop_na(estas)
library(tidyr)
drop_na(estas)
estas <- drop_na(estas)
df_estas <- st_drop_geometry(estas)
df_estas <- df_estas[,1:4]
write.csv2(df_estas,'Evaluaciones/data/data_estaciones.csv')
df_estaciones <- read.csv2('../data/data_estaciones.csv')
sf_estaciones <- st_as_sf(df_estaciones,coords = c('longitud','latitud'),crs =4326)
sf_estaciones
cuencas <- read_sf('../data/cuencas_Chile')
cuencas
cuencas$NOM_CUEN
cuencas$NOM_CUEN |> unique()
cuencas
st_crs(cuencas)
estas
cuencas[cuencas$NOM_CUEN == 'Rio Imperial',]
estas_imperial <- st_intersection(estas,cuenca_imperial)
cuenca_imperial <- cuencas[cuencas$NOM_CUEN == 'Rio Imperial',]
estas_imperial <- st_intersection(estas,cuenca_imperial)
cuencas <- read_sf('../data/cuencas_Chile')
cuencas <- st_transform(cuencas,st_crs(estas))
cuenca_imperial <- cuencas[cuencas$NOM_CUEN == 'Rio Imperial',]
estas_imperial <- st_intersection(estas,cuenca_imperial)
estas_imperial
plot(estas_imperial$geometry)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
library(elevatr)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
library(elevatr)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
install.packages('rgdal')
library(elevatr)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
elev_dem <- extract(dem,estas_imperial)
library(elevatr)
plot(dem_imperial)
dem_imperial <- get_elev_raster(cuenca_imperial,z = 9)
?tm_grid
library(tmap)
tm_grid
?tm_grid
iris
df['Petal.Length']
iris['Petal.Length']
library(terra)
library(sf)
library(tmap)
library(elevatr)
library(rgdal)
library(terra)
library(sf)
library(tmap)
library(elevatr)
library(rgdal)
df_estaciones <- read_sf("data_estaciones.csv")
df_estaciones <- read.csv2("data_estaciones.csv")
setwd("~/OneDrive/UMayor/Escuelas/MedioAmbiente/2022/2do_semestre/IMSE1017/Evaluaciones/Examen")
library(terra)
library(sf)
library(tmap)
library(elevatr)
library(rgdal)
df_estaciones <- read_sf("data_estaciones.csv")
df_estaciones <- read.csv2("data_estaciones.csv")
df_estaciones
sf_estaciones <- st_as_sf(df_estaciones,coords = c("latitud","longitud","altitud"))
sf_estaciones
plot(sf_estaciones$geometry)
cuenca_Imperial <- st_transform(cuenca_Imperial,4326)
head(df_estaciones)
sf_estaciones <- st_set_crs(sf_estaciones,4326)
cuenca <- read_sf('cuencas_Chile/Cuencas_BNA.shp')
cuenca_Imperial <- cuenca[cuenca$NOM_CUEN == "Rio Imperial",]
cuenca_Imperial
plot(cuenca_Imperial$geometry)
sf_estaciones <- st_transform(sf_estaciones,st_crs(cuenca_Imperial))
estaciones_cuenca <- st_intersection(sf_estaciones,cuenca_Imperial)
estaciones_cuenca
estaciones_cuenca |> nrow()
estaciones_cuenca |> ncol()
library(elevatr)
library(progress)
dem <- get_elev_raster(cuenca_Imperial,z=9)
cuenca_Imperial
dem <- get_elev_raster(cuenca_Imperial,z=9)
cuenca_Imperial
dem_imperial <- get_elev_raster(cuenca_Imperial,z=9)
dem_imperial1 <- trim(mask(dem_imperial,cuenca_Imperial))
dem_imperial1 <- rast(dem_imperial1)
slope = terrain(dem_imperial1, v='slope',unit = 'radians')
aspect = terrain(dem_imperial1, v='aspect',unit = 'radians')
hill = shade(slope, aspect)
library(tmap)
tmap mode set to plotting
mapa <- tm_shape(hill) +
tm_raster(style = 'cont',palette = grey(0:100/100),legend.show = FALSE) +
tm_shape(dem_imperial1) +
tm_raster(title= 'Elevación (m)', style ='cont',palette = rev(topo.colors(20)),alpha = .4) +
tm_graticules(lwd = .4,alpha = .6) +
tm_compass(position = c('right','top'))
mapa2 <- tm_shape(cuenca_Imperial) +
tm_borders() +
tm_shape(estaciones_cuenca,size=3) +
tm_dots()
mapa <- mapa+mapa2
tmap_mode('view')
plot(mapa)
dem <- get_elev_raster(cuenca_Imperial,z=9)
cuenca_Imperial
sf_estaciones
library(sf)
library(terra)
library(raster)
library(progress)
library(rgdal)
library(elevatr)
library(tmap)
#lea el archivo y asignelo a al obejto df_estaciones
df_estaciones<-read.csv2('data_estaciones.csv')
#convierte el objeto df_estaciones en un objeto sf y asignele coordenadas geograficas asignelo al objeto sf_estaciones(profe lo asignare a sf_estaciones1)
sf_estaciones1<-st_as_sf(df_estaciones)
st_as_sf(objeto,coords=c("longitud","latitud",))
cuencas<-read_sf('cuencas_Chile')
cuencas2<-st_transform(cuencas,4326)
cuencaRI<-cuencas2[cuencas2$NOM_CUEN=='rio Imperial']
intersec<-st_intersection(sf_estaciones,cuencaRI)
estaciones<-Intersec
plot(st_geometry(cuencaRI))
plot(estaciones$geometry,add=TRUE)
#4 utilice el paquete elevart y asignelo al objeto dem_imperial
dem_imperial<-get_elev_raster(cuencaRI,z=10)
dem_imperial<-rast(dem_imperial)
#6 cree un mapa de sombras
#primero hareos una mascara del dem eliminando los espacios en blanco
na.omit(cuencaRI)
maskRI<-mask(dem,cuencaRI)
plot(maskRI)
RI<-trim(maskRI)
plot(RI)
#para crear el mapa partimos por crear un raster de aspecto y slope utilizando las funciones terrain y shade
slope=terrain(RI,v='slope',unit='radians')
aspect=terrain(RI,v='aspect',unit='radians')
hill=shade(slope,aspect)
plot(hill)
#utilizamos tmap
tmap_mode('plot')
mapa<-tm-shape(hill)+tm_raster(style='cont',palette=grey(0:100/100),legend.show=FALSE)+tm_shape(dem_imperial)+tm_raster(title = 'Elevacion(m)',style='cont',palette = rev(topo.colors(20)),alpha=.6)+tm_compass(position=c('ringht','top'))mapa
#agregar limites de la cuenca y estaciones(mapa de los bordes de la cuenca)
bordes<-st_union(cuencaRI$geometry)
mapabordes<-tm_shape(bordes)+tm_borders(lw=4)
mapabordes
#agregar al mapa las estaciones que corresponden
mapaestaciones<-mapabordes+tm_shape(estaciones)+tm_dots
mapaestaciones
#unir el mapa del punto anterior con el de los limites de la cuenca y las estaciones
mapa3RI<-mapabordes+mapaestaciones
mapa3RI
#7 cree un mapa estatico con tmap. debe contener leyenda....
tmap_mode("plot")
mapa3RI
library(sf)
library(terra)
library(raster)
library(tmap)
library(elevatr)
#Lea el archivo en R y asígnelo al objeto df_estaciones
df_estaciones <- read.csv2("data_estaciones.csv")
df_estaciones
sf_estaciones <- st_as_sf(df_estaciones)
sf_estaciones<-st_transform(sf_estaciones, 4326)
#Utilice el archivoCuencas_BNA y seleccione las estaciones que se encuentran en la cuenca del río Imperial.
Cuencas_BNA<- read_sf('cuencas_Chile')
cuencas_ri <- Cuencas_BNA[Cuencas_BNA$NOM_CUEN == 'Rio Imperial',]
int <- st_intersection(sf_estaciones, cuencas_ri)
sf_estaciones <- st_as_sf(df_estaciones,coords = c('longitud','latitud'),crs=4326)
sf_estaciones
#Utilice el archivoCuencas_BNA y seleccione las estaciones que se encuentran en la cuenca del río Imperial.
Cuencas_BNA<- read_sf('cuencas_Chile')
cuencas_ri <- Cuencas_BNA[Cuencas_BNA$NOM_CUEN == 'Rio Imperial',]
int <- st_intersection(sf_estaciones, cuencas_ri)
#Utilice el paquete {elevatr} para descargar datos de elevación para la cuenca del río Imperial. Asignelo al objeto dem_imperial.
dem_imperial <- get_elev_raster(cuencas_ri)
intersect(iris,risi)
intersect(iris,iris)
?intersect
a = c(10,20,10,10,40,50,20,30)
b = c(10,30,10,20,0,50,30,30)
print("Original data frame:")
ab = data.frame(a,b)
print(ab)
print("Duplicate elements of the said data frame:")
print(duplicated(ab))
?list
list(1,2,dimmnames=c('a','b'))
a <-list(1,2,dimmnames=c('a','b'))
a
a <-list(1,2,names=c('a','b'))
a
names(a)
l1 <- list(1)
l2 <- list(2)
c(l1,l2)
list(l1,l2)
f1 <- factor(sample(LETTERS, size=6, replace=TRUE))
f2 <- factor(sample(LETTERS, size=6, replace=TRUE))
print("Original factors:")
print(f1)
print(f2)
f = factor(c(levels(f1)[f1], levels(f2)[f2]))
f1
f2
f
library(agrometR)
library(agrometR)
estaciones_agromet
sample(estaciones_agromet$ema,5)
ids <- sample(estaciones_agromet$ema,5)
ids
data <- get_agro_data(ids,as.POSIXct("2023-08-03 09:00"),as.POSIXct("2023-08-03 12:00"))
data
estaciones_agromet
data
?get_agro_data
sessionInfo()
sessionInfo()
?get_agro_data
estaciones_agromet$ema
ids
set.seed(454)
ids <- sample(estaciones_agromet$ema,5)
ids
data
estaciones_agromet
estaciones_agromet
x <- 1:10
# funciones anidadas
sqrt(mean(x))
x |>
mean() |>
sqrt()
library(tidyverse)
filter
library(terra)
r <- rast('/vsicurl/https://data.chc.ucsb.edu/products/CHIRPS-2.0/global_annual/tifs/chirps-v2.0.2022.tif')
r <- rast('/vsicurl/https://data.chc.ucsb.edu/products/CHIRPS-2.0/global_pentad/cogs/chirps-v2.0.2023.07.6.cog')
plot(r)
library(agrometR)
estaciones_agromet
estaciones_agromet |> distinct(region)
library(tidyverse)
estaciones_agromet |> distinct(region)
estaciones_agromet |> filter(region == 'Metropolitana')
estaciones_agromet |>
filter(region == 'Metropolitana') |>
pull(ema) ->ids
ids
get_agro_data(ids,"2023-09-08","2023-09-11")
data <- get_agro_data(ids,"2023-09-08","2023-09-11")
data
data |> drop_na()
data <- get_agro_data(ids,ymd("2023-09-08"),ymd("2023-09-11"))
data
data |> drop_na()
data <- get_agro_data(ids,ymd("2023-09-01"),ymd("2023-09-11"))
data
data |> drop_na()
data <- get_agro_data(ids,ymd("2023-08-01"),ymd("2023-08-11"))
data
data |> drop_na()
data <- get_agro_data(ids,as_datetime("2023-08-01"),as_datetime("2023-08-11"))
data
data |> drop_na()
order(iris$Sepal.Length,iris$Sepal.Width)
order(iris$Sepal.Length)
?order
estaciones_agromet |> write_csv2('~/Descargas/estaciones_agromet.csv')
data <- read.csv2('data/estaciones_agromet.csv')
data
getwd()
ruta <- "/home/francisco/OneDrive/R-projects/Clases/IMSE1017/data/estaciones_agromet.csv"
ruta
?read.csv
# utilizando ruta absoluta
ruta <- "/home/francisco/OneDrive/R-projects/Clases/IMSE1017/data/estaciones_agromet.csv"
data <- read.csv2(ruta)
data
str(data)
getwd()
# utilizando ruta absoluta
ruta <- "/home/francisco/OneDrive/R-projects/Clases/IMSE1017/data/estaciones_agromet.csv"
=======
r1
r2
#7.Escriba un programa R para concatenar dos matrices dadas de la misma columna pero filas diferentes.
z1 <- matrix(1:3, nrow = 3)
z2 <- matrix(4:6, nrow = 3)
rbind(z1, z2)
z1
z2
#a-.Escriba un programa en R para crear una secuencia de números del 20 al 50 y encuentre la media de los números del 20 al 60 y la suma de los números del 51 al 91.
(Aa_sec <- c(20:50))
(Aa_med <- mean(20:60))
(Aa_sum <- sum(51:91))
#b-.Escriba un programa en R para crear una curva de campana de una distribución normal aleatoria.
Ab_dis <- rnorm(n=10000,mean=100,sd = 10)
(Ab_his <- hist(Ab_dis))
#c-. Escriba un programa R para crear una lista de elementos usando vectores, matrices y funciones. Imprime el contenido de la lista.
Ac_vec1 <- c(9,19,24)
Ac_vec2 <- c("cerdo, mapache, oso")
Ac_mat1 <- matrix(1:20,nrow=5,ncol=4)
Ac_colors <- c("rojo","azul","morado","rosa","rojo","verde","azul","gris","morado","celeste","rojo","azul")
Ac_mat2 <- matrix(Ac_colors,nrow=4,ncol=3)
(Ac_lis <- list(Números=Ac_vec1,Animales=Ac_vec2,M_Números=Ac_mat1,M_Colores=Ac_mat2,funcion1=args,funcion2=which))
Ac_lis
Ac_lis
#d-. Escriba un programa en R para crear una matriz de 5 x 4, una matriz de 3 x 3 con etiquetas y rellene la matriz por filas y una matriz de 2 x 2 con etiquetas y rellene la matriz por columnas.
(Ad_mat1 <- matrix(data=1:20,nrow = 5,ncol=4))
#d-. Escriba un programa en R para crear una matriz de 5 x 4, una matriz de 3 x 3 con etiquetas y rellene la matriz por filas y una matriz de 2 x 2 con etiquetas y rellene la matriz por columnas.
(Ad_mat1 <- matrix(data=1:20,nrow = 5,ncol=4))
Ad_mat2 <- matrix(data=1:9,nrow=3,ncol=3,byrow=TRUE)
rownames(Ad_mat2) <- c("row1","row2","row3")
colnames(Ad_mat2) <- c("col1","col2","col3")
Ad_mat2
Ad_mat3 <- matrix(data=1:4,nrow=2,ncol=2,byrow=FALSE)
rownames(Ad_mat3) <- c("1","2")
colnames(Ad_mat3) <- c("A","B")
Ad_mat3
#e-. Escriba un programa R para crear un data.frame que contenga detalles (genero, edad, rut, dirección, profesión) de 5 empleados y muestre un resumen de los datos.
Ae_gene <- c("Masculino","Masculino","Femenino","Femenino","Femenino")
Ae_edad <- c(42,37,36,41,30)
Ae_rut <- c(134410772,141574356,139793551,137664093,145505147)
Ae_dire <- c("San Francisto 456","Luis de la Torre 31","Río bueno 42","San Pablo 1440","Maipu 560")
Ae_prof <- c("Gerente general","Contador auditor","Ingeniería industrial","Técnico de operaciones logísticas","Gerente de operación")
(Ae_dtfr <- data.frame(Género=Ae_gene,Edad=Ae_edad,Rut=Ae_rut,Dirección=Ae_dire,Profesión=Ae_prof))
Ae_dtfr
#a.- Escriba un programa en R para crear un vector de un tipo y una longitud específicos. Cree vectores de tipos numéricos, complejos, lógicos y de caracteres de longitud 6.
Ba_vec1 <- 10:5
Ba_vec2 <- c(10,20,30,40,50,60)
Ba_vec3 <- c(1i,3-2i,10+4i,6i,11i,7-3i)
Ba_vec4 <- c(14i,2+2i,5-3i,9i,20-5i,6i)
Ba_vec5 <- c(TRUE,TRUE,FALSE,TRUE,FALSE,FALSE)
Ba_vec6 <- c(FALSE,FALSE,TRUE,FALSE,TRUE,TRUE)
Ba_vec7 <- c("Mapache","Oso","Jirafa","Cerdo","Conejo","Perro")
Ba_vec8 <- rep(x = "Dandelion",times=6)
length(Ba_vec1)
length(Ba_vec2)
length(Ba_vec3)
length(Ba_vec4)
length(Ba_vec5)
length(Ba_vec6)
length(Ba_vec7)
length(Ba_vec8)
# b-. Escriba un programa en R para sumar dos vectores de tipo entero y longitud 3.
Bb_vec1 <- c(4L,7L,16L)
Bb_vec2 <- c(8L,10L,2L)
(Bb_suma <- Bb_vec1 + Bb_vec2)
# c-. Escriba un programa en R para encontrar la suma, la media y el producto de un vector.
Bc_vec <- 1:20
(Bc_sum <- sum(Bc_vec))
(Bc_med <- mean(Bc_vec))
(Bc_pro <- prod(Bc_vec))
# d-. Escriba un programa R para encontrar la suma, la media y el producto de un vector, ignore elementos como NA o NaN.
Bd_vec <- c(NA,1,33,17,NA,25,22)
(Bd_sum <- sum(Bd_vec,na.rm=TRUE))
(Bd_med <- mean(Bd_vec,na.rm=TRUE))
(Bd_prod <- prod(Bd_vec,na.rm=TRUE))
# e-. Escriba un programa en R para ordenar un Vector en orden ascendente y descendente.
Be_vec <- c(9,24,19,2,30,22)
(Be_vec_cre <- sort(Be_vec,decreasing = FALSE))
(Be_vec_dec <- sort(Be_vec,decreasing=TRUE))
# f-. Escriba un programa R para probar si un vector dado contiene un elemento específico.
Be_vec == 19 #En caso de que se busque obtener un vector lógico como salida
19 %in% Be_vec #En caso de que se busque obtener una sola respuesta lógica
# g-. Escriba un programa R para encontrar el segundo valor más alto en un vector dado.
Bg_vec <- c(23,56,3,96,12,45)
(Bg_vec_dec <- sort(Bg_vec,decreasing=TRUE))
Bg_vec_dec[2]
# h-. Escriba un programa en R para encontrar el enésimo valor más alto en un vector dado.
Bh_vec <- 1:100
Bh_vec_dec <- sort(Bh_vec,decreasing=TRUE)
Bh_vec_dec[1] #Primer valor más alto
Bh_vec_dec[2] #segundo valor más alto
Bh_vec_dec[3] #tercer valor más alto
# i-. Escriba un programa en R para convertir la(s) columna(s) dada(s) de un data.frame en un vector.
(Bi_v1 <- Ae_dtfr[,1])
(Bi_v2 <- Ae_dtfr[,2])
(Bi_v3 <- Ae_dtfr[,3])
(Bi_v4 <- Ae_dtfr[,4])
(Bi_v5 <- Ae_dtfr[,5])
# j-. Escriba un programa R para encontrar los elementos de un vector dado que no están en otro vector dado.
Bj_vec1 <- c(2,9,19,22,24,30)
Bj_vec2 <- c(4,7,9,17,21,22)
setdiff(Bj_vec1,Bj_vec2) #Para encontrar qué elementos de Bj_vec1 no están en Bj_vec1
setdiff(Bj_vec2,Bj_vec1) #Para encontrar qué elementos de Bj_vec2 no están en Bj_vec1
# k-. Escriba un programa en R para invertir el orden del vector dado.
Bk_vec <- 1:50
(bk_vec_rev <- rev(Bk_vec))
# l-. Escriba un programa en R para crear un vector y encuentre la longitud y la dimensión del vector.
Bl_vec <- c(9,19,24,30)
(Bl_lon <- length(Bl_vec))
(Bl_dim <- dim(Bl_vec))
# m-. Escriba un programa R para probar si el valor del elemento de un vector dado es mayor que 10 o no. Devuelve TRUE o FALSE
Bm_vec <- 5:35
Bm_valor <- Bm_vec[3] #En este caso, se extrae el tercer valor
Bm_valor > 10
# n-. Escriba un programa en R para sumar 3 a cada elemento en un vector dado. Imprime el vector original y el nuevo.
(Bn_vec <- 1:20)
(Bn_suma <- Bn_vec+3)
# o-. Escriba un programa en R para crear un vector usando el operador : y la función seq().
Bo_vec1 <- 1:100
Bo_vec2 <- seq(from=0,to=100,by=10)
# a-. Escriba un programa R para encontrar los niveles de factor de un vector dado.
(Ca_colores <- factor(
c("azul","rojo","amarillo","rojo","verde","amarillo","azul",
levels=c("azul","rojo","amarillo","verde"))))
(Ca_niveles <- levels(Ca_colores))
# b-. Escriba un programa R para cambiar el primer nivel de un factor con otro nivel de un factor dado.
levels(Ca_colores)[1] <- levels(iris$Species)[1]
levels(Ca_colores)
# c-. Escriba un programa en R para crear un factor ordenado a partir de datos que consisten en los nombres de los meses.
Cc_meses <- month.name
(Cc_fac <- factor(Cc_meses,levels=Cc_meses))
(Cc_fac2 <- factor(Cc_meses,ordered=TRUE))
# d-. Escriba un programa R para extraer los cinco niveles de factor creados a partir de una muestra aleatoria de las letters (parte de la distribución base R).
set.seed(123)
Cd_letras <- sample(letters,5)
Cd_fac <- factor(Cd_letras)
levels(Cd_fac)
# e-. Escriba un programa en R para crear un factor correspondiente al conjunto de datos de la altura de las mujeres, que contenga la altura y el peso de una muestra de mujeres.
Ce_grupo <- factor(c("G1","G2","G1","G2"))
Ce_altura <- c(1.67,1.55,1.63,1.70)
Ce_peso <- c(55,61,62,65)
Ce_dtfr <- data.frame(Ce_grupo,Ce_altura,Ce_peso)
str(Ce_dtfr)
# a-. Escriba un programa en R para crear una matriz en blanco.
Da_mat <- matrix(data=NA,nrow=5,ncol=5)
# b-. Escriba un programa en R para crear una matriz tomando como entrada un vector dado de números. Muestre la matriz.
Db_vec <- 1:20
(Db_mat <- matrix(Db_vec,nrow=4,ncol=5)) #NOTA: si la matriz es de menor cantidad de elementos que el vector, se asignan los primeros elementos
# c-. Escriba un programa en R para crear una matriz que tome un vector dado de números como entrada y defina los nombres de columna y fila. Muestre la matriz.
Dc_mat <- matrix(Db_vec,nrow=5,ncol=4,byrow = TRUE)
rownames(Dc_mat) <- c(1,2,3,4,5)
colnames(Dc_mat) <- c("A","B","C","D")
Dc_mat
# d-. Escriba un programa en R para crear dos matrices de 2x3, luego sume, reste, multiplique y divida las matrices.
Dd_mat1 <- matrix(data=5:10,nrow=2,ncol=3)
Dd_mat2 <- matrix(data=15:20,nrow=2,ncol=3)
Dd_mat1
Dd_mat2
(Dd_sum <- Dd_mat1+Dd_mat2)
(Dd_res <- Dd_mat1-Dd_mat2)
(Dd_mul <- Dd_mat1*Dd_mat2)
(Dd_div <- Dd_mat1/Dd_mat2)
# h-. Escriba un programa en R para crear una matriz de correlación a partir de un data.frame del mismo tipo de datos.
Dh_dtfr <- data.frame(S1=c(1,2,3,4,5),S2=c(34,56,76,78,90),S3=c(11,12,26,34,35),S4=c(45,46,49,55,60),S5=c(90,95,96,97,100))
(Dh_cor <- cor(Dh_dtfr))
# i-. Escriba un programa R para encontrar el índice de fila y columna de valor máximo y mínimo en una matriz dada.
Di_vec <- c(8,3,45,23,33,12,64,30,2,3,56,41,49,32,53,12,11,9,5,60)
(Di_mat <- matrix(data=Di_vec,nrow=4,ncol=5))
(Di_max <- max(Di_mat))
(Di_log_max <- Di_mat == Di_max)
(Di_rowcol_max <- which(Di_log_max,arr.ind = TRUE))
(Di_min <-min(Di_mat))
(Di_log_min <- Di_mat == Di_min)
(Di_rowcol_min <- which(Di_log_min,arr.ind=TRUE))
# j-. Escriba un programa R para concatenar dos matrices dadas de la misma columna pero filas diferentes.
Dj_mat1 <- matrix(data=12:1,nrow=3,ncol=4)
Dj_mat2 <- matrix(data=21:40,nrow=5,ncol=4)
(Dj_union <- rbind(Dj_mat1,Dj_mat2))
n <- rnorm(10000, 500, 100)
hist(n)
cells = c(1,3,5,7,8,9,11,12,14)
rnames = c("Row1", "Row2", "Row3")
cnames = c("Col1", "Col2", "Col3")
m2 = matrix(cells, nrow=3, ncol=3, byrow=TRUE, dimnames=list(rnames, cnames))
sample(x,5)
x <- rnorm(10)
sample(x,5)
x <- rnorm(10)
x[sample(1:10,2)] <- NA
x
?na.omit
x <- round(rnorm(10)*10)
sort(x,decreasing = TRUE)[2]
x
v1 <- 1:5
v2 <- 3:7
v1[!(v1 %in% v2)]
v1
v1;v2
v1[!(v1 %in% v2)]
#los elementos de v2 que no estan en v1
v2[!(v2 %in% v1)]
v <- 5:14
v[8] > 10
v[8]
v[8] > 10
factor(sample(letters,40,replace = TRUE))
factor(sample(letters[1:10],40,replace = TRUE))
factor(sample(letters[1:5],40,replace = TRUE))
letras <- factor(sample(letters[1:5],40,replace = TRUE))
sample(1:5,10)
sample(1:5,10,replace = TRUE)
letras <- factor(letters[sample(1:5,10,replace = TRUE)],)
letras <- factor(letters[sample(1:5,10,replace = TRUE)])
letras
levels(letras)
sample(1:5,10,replace = TRUE)]
sample(1:5,10,replace = TRUE)
letras <- factor(letters[sample(1:5,20,replace = TRUE)])
levels(letras)
?matrix
matrix(v1,3,3,dimnames = list(c('fila','fila2','fila3'),c('col1','col2','col3')))
m <- matrix(sample(1:100,9),3,3)
m
which(m == max(m),arr.ind = TRUE)
which(m == min(m),arr.ind = TRUE)
m1 <- matrix(sample(1:100,12),3,4)
m2 <- matrix(sample(1:100,20),5,4)
m1 <- matrix(sample(1:100,12),3,4)
m2 <- matrix(sample(1:100,20),5,4)
cbind(m1,m2)
m1 <- matrix(sample(1:100,12),3,4)
m2 <- matrix(sample(1:100,20),5,4)
cbind(m1,m2)
rbind(m1,m2)
letras <- factor(sample(letters[1:5],40,replace = TRUE))
levels(iris$Species) <- levels(letras)[1]
levels(iris$Species)[1] <- levels(letras)[1]
levels(iris$Species)
>>>>>>> 94916ea (agregar evaluación 1 taller)
